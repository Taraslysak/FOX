{"version":3,"file":"31.main.js","sources":["webpack:///./src/components/views/projects/ProjectList.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { FoxEntityListTable, FoxTableWithDeleteOption } from '../../tables'\n\nimport { getProfileFetch, getProjectList, setProjectId } from '../../../actions'\n\n\nconst getBadge = status => {\n  switch (status) {\n    case 'Created': return 'secondary'\n    case 'Submitted': return 'warning'\n    case 'Approved': return 'success'\n    case 'Rejected': return 'danger'\n    case 'Application processing': return 'secondary'\n    case 'Ready to start': return 'success'\n    case 'Works started': return 'info'\n    case 'Works finished': return 'warning'\n    case 'Extended': return 'primary'\n    case 'Closed': return 'dark'\n    default: return 'primary'\n  }\n}\n\n\nclass ProjectList extends Component {\n\n  componentDidMount = async () => {\n    this.props.setProjectId(this.props.match.params.id)\n    await this.props.getProfileFetch()\n      .then(() => this.props.getProjectList(this.props.role))\n  }\n\n  render = () => {\n    return (\n      this.props.role == 'CliAdm' ?\n        <FoxTableWithDeleteOption\n          {...this.props}\n          tableName='Projects'\n          fields={this.props.projectTable.fields}\n          getBadge={getBadge}\n          tableData={this.props.projectTable.tableData}\n          updateList={this.props.getProjectList}\n        /> :\n        <FoxEntityListTable\n          {...this.props}\n          tableName='Projects'\n          fields={this.props.projectTable.fields}\n          getBadge={getBadge}\n          tableData={this.props.projectTable.tableData}\n        />\n\n    )\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    projectTable: state.entityListTable,\n    role: state.currentUser.role\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getProfileFetch: () => dispatch(getProfileFetch()),\n  getProjectList: (role) => dispatch(getProjectList(role)),\n  setProjectId: () => dispatch(setProjectId())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectList)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAXA;AAaA;AACA;AAEA;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AALA;AASA;AACA;;;;;AA7BA;AACA;AA+BA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}