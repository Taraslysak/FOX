{"version":3,"file":"22.main.js","sources":["webpack:///./src/components/views/projects/ProjectUploadDocs.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { getProfileFetch, getDocumentList, setProjectId } from '../../../actions'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel, CRow,\r\n  CCol,\r\n  CLink,\r\n  CButton,\r\n  CInputFile\r\n} from \"@coreui/react\";\r\nimport DjangoCSRFToken from 'django-react-csrftoken'\r\nimport { FoxApiService } from '../../../services'\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nclass ProjectUploadDocs extends Component {\r\n\r\n  state = {\r\n    filename: \"\",\r\n    file_id: \"\",\r\n    project: this.props.match.params.id,\r\n    url_to_doc: \"\",\r\n    upload_files: {},\r\n    error: false,\r\n  }\r\n\r\n  downloadFile = async (e) => {\r\n    this.setState({\r\n      filename: e.target.value,\r\n      file_id: e.target.name\r\n    }, () => {\r\n      foxApi.downloadDocument(this.state.file_id)\r\n        .then((blob) => {\r\n          const url = window.URL.createObjectURL(new Blob([blob]));\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          const filename = this.state.filename.split('/').pop();\r\n          link.setAttribute('download', filename);\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          link.parentNode.removeChild(link);\r\n        })\r\n        .then(() => { console.log('file downloaded') })\r\n        .catch((error) => {\r\n          console.error('File download failed!');\r\n          console.error(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  handleFileUpload = event => {\r\n    console.log(\"initila state\", this.state);\r\n    const { upload_files } = this.state;\r\n    upload_files[event.target.name] = event.target.files[0];\r\n    this.setState({\r\n      upload_files: upload_files\r\n    });\r\n  }\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    const { upload_files } = this.state;\r\n    console.log(upload_files);\r\n\r\n    Object.entries(upload_files).forEach(([key, value]) => {\r\n\r\n      const uploadFilesData = new FormData();\r\n      uploadFilesData.append('file', value);\r\n      upload_files[key] = uploadFilesData\r\n    })\r\n\r\n    await Promise.all([\r\n      Object.entries(upload_files).forEach(([key, value]) => {\r\n        foxApi.patchEntityWithFiles(\"documents\", key, value);\r\n      })\r\n    ])\r\n      .then(() => {\r\n        this.props.history.goBack()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        this.setState({\r\n          error: 'Document update failed!' +\r\n            ' Please check your input and try again!' +\r\n            ' In case this problem repeats, please contact your administrator!'\r\n        })\r\n      })\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.getProfileFetch()\r\n      .then(() => this.props.getDocumentList({\r\n        target_type: \"Contractor\",\r\n        project_id: this.props.match.params.id\r\n      }, false))\r\n  }\r\n\r\n  render = () => {\r\n    let documentWidgetArray = []\r\n\r\n    if (this.props.documents) {\r\n      documentWidgetArray = this.props.documents.map((document) => {\r\n        return (\r\n          <CFormGroup key={`fg-${document.id}`}>\r\n            <CLabel key={`lb-${document.id}`} htmlFor={document.id}>{document.name}</CLabel>\r\n            {document.url_to_doc ?\r\n              <CLink\r\n                key={`dl-${document.id}`}\r\n                href={document.url_to_doc}\r\n                target=\"_blank\"\r\n                className=\"btn btn-ghost-primary\"\r\n              >\r\n                Open this document in Google Docs\r\n            </CLink>\r\n              :\r\n              <React.Fragment>\r\n                <CButton\r\n                  variant=\"outline\"\r\n                  color=\"primary\"\r\n                  key={`cb-${document.id}`}\r\n                  id={document.id}\r\n                  name={document.id}\r\n                  value={document.filename}\r\n                  onClick={this.downloadFile}\r\n                >\r\n                  Download template for this document\r\n              </CButton>\r\n                <CLabel key={`lb-${document.id}`} htmlFor={document.id}>Upload filled up document</CLabel>\r\n                <CInputFile key={`of-${document.id}`}\r\n                  id={`file-${document.id}`}\r\n                  name={`${document.id}`}\r\n                  onChange={this.handleFileUpload}\r\n                />\r\n              </React.Fragment>\r\n            }\r\n          </CFormGroup>\r\n        )\r\n      })\r\n    }\r\n\r\n    return (\r\n      <CRow>\r\n        <CCol>\r\n          <CForm\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            <DjangoCSRFToken />\r\n            {documentWidgetArray}\r\n            <CFormGroup>\r\n              <CButton type=\"submit\" color=\"dark\" variant=\"outline\" block>Submit documents</CButton>\r\n            </CFormGroup>\r\n            {this.state.error\r\n              ? <p>{this.state.error}</p>\r\n              : null\r\n            }\r\n          </CForm>\r\n        </CCol>\r\n      </CRow >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    documents: state.entityListTable.tableData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getProfileFetch: () => dispatch(getProfileFetch()),\r\n  getDocumentList: (params, additional) => dispatch(getDocumentList(params, additional)),\r\n  setProjectId: (id) => dispatch(setProjectId(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectUploadDocs)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuBA;AACA;AADA;AAGA;AACA;AAAA;AACA;AADA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAaA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AASA;AACA;AACA;AACA;AAIA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAjJA;AACA;AAkJA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}