{"version":3,"file":"25.main.js","sources":["webpack:///./src/components/views/workers/Assign.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { getProfileFetch, getWorkerList, getDocumentList, setProjectId } from '../../../actions'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  CForm,\r\n  CFormGroup,\r\n  CLabel,\r\n  CRow,\r\n  CCol,\r\n  CButton,\r\n  CInputCheckbox,\r\n} from \"@coreui/react\";\r\nimport DjangoCSRFToken from 'django-react-csrftoken'\r\nimport { FoxApiService } from '../../../services'\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nclass WorkerAssign extends Component {\r\n\r\n  state = {\r\n    workers: [],\r\n    error: false,\r\n  }\r\n\r\n  handleCheck = event => {\r\n    const { workers } = this.state\r\n    event.target.checked ?\r\n      workers.push(parseInt(event.target.value))\r\n      :\r\n      workers.splice(workers.indexOf(parseInt(event.target.value)), 1);\r\n    this.setState({\r\n      workers: workers\r\n    });\r\n  }\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    const { workers } = this.state;\r\n    const workersData = { workers: workers };\r\n    await foxApi.patchEntityOf(\"projects\", this.props.match.params.id, workersData)\r\n      .then(() => {\r\n        this.props.history.goBack()\r\n      },\r\n        (error) => {\r\n          console.error(error);\r\n          this.setState({\r\n            error: 'Workers assignment failed!' +\r\n              ' Please check your input and try again!' +\r\n              ' In case this problem repeats, please contact your administrator!'\r\n          })\r\n        })\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.getProfileFetch()\r\n      .then(() => this.props.getWorkerList())\r\n      .then(() => foxApi.getDetailsOf(\"projects\", this.props.match.params.id))\r\n      .then(data => this.setState({ workers: data.workers }))\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <CRow>\r\n        <CCol>\r\n          <CForm onSubmit={this.handleSubmit}>\r\n            <DjangoCSRFToken />\r\n            <CFormGroup>\r\n              <h4>Please, choose workers you want to assign for this project</h4>\r\n              {this.props.workers ?\r\n                this.props.workers.map((worker) => {\r\n                  let workers = this.state.workers;\r\n                  return (\r\n                    <CFormGroup key={`fg-${worker.id}`} variant=\"checkbox\" className=\"checkbox d-flex\">\r\n                      <CInputCheckbox\r\n                        key={`cb-${worker.id}`}\r\n                        id={worker.id}\r\n                        name={worker.id}\r\n                        value={worker.id}\r\n                        onChange={this.handleCheck}\r\n                        checked={workers.includes(worker.id)}\r\n                      />\r\n                      <CLabel key={`lb-${worker.id}`} variant=\"checkbox\" className=\"form-check-label mr-4\" htmlFor={worker.id}>{worker.name}</CLabel>\r\n                    </CFormGroup>\r\n                  )\r\n                }) : null}\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CButton type=\"submit\" color=\"dark\" variant=\"outline\" block>Save changes</CButton>\r\n            </CFormGroup>\r\n            {this.state.error\r\n              ? <p>{this.state.error}</p>\r\n              : null\r\n            }\r\n          </CForm>\r\n        </CCol >\r\n      </CRow >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    workers: state.entityListTable.tableData,\r\n    company: state.currentUser.company,\r\n    contractor: state.currentUser.id,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getProfileFetch: () => dispatch(getProfileFetch()),\r\n  getWorkerList: () => dispatch(getWorkerList()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkerAssign)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAEA;AACA;AAGA;AACA;AADA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAMA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAGA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAjFA;AACA;AAkFA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AACA;AAIA;;;;A","sourceRoot":""}