{"version":3,"file":"19.main.js","sources":["webpack:///./src/components/views/workers/Assign.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { getProfileFetch, getWorkerList, getDocumentList, setProjectId } from '../../../actions'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  CForm,\r\n  CFormGroup,\r\n  CLabel, CRow,\r\n  CCol,\r\n  CButton,\r\n  CInputCheckbox,\r\n  CInputFile\r\n} from \"@coreui/react\";\r\nimport DjangoCSRFToken from 'django-react-csrftoken'\r\nimport { FoxApiService } from '../../../services'\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nclass WorkerAssign extends Component {\r\n\r\n  state = {\r\n    workers: [],\r\n    error: false,\r\n    filename: \"\",\r\n    file_id: \"\",\r\n    upload_files: {}\r\n  }\r\n\r\n  downloadFile = async (e) => {\r\n    console.log(this.state);\r\n    this.setState({\r\n      filename: e.target.value,\r\n      file_id: e.target.name\r\n    }, () => {\r\n      console.log(this.state);\r\n      foxApi.downloadDocument(this.state.file_id)\r\n        .then((blob) => {\r\n          const url = window.URL.createObjectURL(new Blob([blob]));\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          const filename = this.state.filename.split('/').pop();\r\n          link.setAttribute('download', filename);\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          link.parentNode.removeChild(link);\r\n        })\r\n        .then(() => { console.log('file downloaded') })\r\n        .catch((error) => {\r\n          console.error('File download failed!');\r\n          console.error(error)\r\n        })\r\n    })\r\n  }\r\n\r\n\r\n  handleCheck = event => {\r\n    const { workers } = this.state\r\n    event.target.checked ?\r\n      workers.push(event.target.value)\r\n      :\r\n      workers.splice(workers.indexOf(event.target.value), 1);\r\n    this.setState({\r\n      workers: workers\r\n    }, () => console.log(this.state));\r\n  }\r\n\r\n  handleFileUpload = event => {\r\n    // const [worker, template] = event.target.name.split('-')\r\n    const { upload_files } = this.state;\r\n    upload_files[event.target.name] = event.target.files[0];\r\n    this.setState({\r\n      upload_files: upload_files\r\n    }, console.log(this.state));\r\n  }\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    const { workers, upload_files } = this.state;\r\n    const workersData = { workers: workers };\r\n    const uploadFileList = [];\r\n\r\n    Object.entries(upload_files).forEach(([key, value]) => {\r\n      const uploadFilesData = new FormData();\r\n      const [worker, template] = key.split('-');\r\n      uploadFilesData.append('worker', worker);\r\n      uploadFilesData.append('template', template);\r\n      uploadFilesData.append('file', value);\r\n      uploadFileList.push(uploadFilesData);\r\n    })\r\n    await Promise.all([\r\n      foxApi.patchEntityOf(\"projects\", this.props.match.params.id, workersData),\r\n      uploadFileList.forEach(file => foxApi.createEntityWithFile(\"worker_documents\", file)),\r\n    ])\r\n      .then(() => {\r\n        this.props.history.goBack()\r\n      },\r\n        (error) => {\r\n          console.error(error);\r\n          this.setState({\r\n            error: 'Workers assignment failed!' +\r\n              ' Please check your input and try again!' +\r\n              ' In case this problem repeats, please contact your administrator!'\r\n          })\r\n        })\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.getProfileFetch()\r\n      .then(() => this.props.getWorkerList())\r\n      .then(() => this.props.getDocumentList(\r\n        {\r\n          target_type: \"Worker\",\r\n          project_id: this.props.match.params.id\r\n        },\r\n        true))\r\n      .then(() => this.props.setProjectId(this.props.match.params.id))\r\n  }\r\n\r\n  render = () => {\r\n    let downloadButtonArray = {};\r\n    let workerList = {}\r\n    if (this.props.documents) {\r\n      downloadButtonArray = this.props.documents.map((document) => {\r\n        return (\r\n          <CFormGroup key={`fg-${document.id}`} className=\"d-flex\">\r\n            <CButton\r\n              variant=\"outline\"\r\n              color=\"success\"\r\n              key={`cb-${document.id}`}\r\n              id={document.id}\r\n              name={document.id}\r\n              value={document.filename}\r\n              onClick={this.downloadFile}\r\n            >\r\n              Download\r\n      </CButton>\r\n            <CLabel key={`lb-${document.id}`} htmlFor={document.id}>{document.name}</CLabel>\r\n          </CFormGroup>\r\n        )\r\n      })\r\n      workerList = this.props.workers.map((worker) => {\r\n        return (\r\n          <CFormGroup key={`fg-${worker.id}`} variant=\"checkbox\" className=\"checkbox d-flex\">\r\n            <CInputCheckbox\r\n              key={`cb-${worker.id}`}\r\n              id={worker.id}\r\n              name={worker.id}\r\n              value={worker.id}\r\n              onChange={this.handleCheck}\r\n            />\r\n            <CLabel key={`lb-${worker.id}`} variant=\"checkbox\" className=\"form-check-label mr-4\" htmlFor={worker.id}>{worker.name}</CLabel>\r\n            {this.props.documents.map((document) => {\r\n              return (\r\n                <React.Fragment key={`fr-${worker.id}`}>\r\n                  <CLabel key={`lb-${worker.id}-${document.id}`}\r\n                    htmlFor={`file-${document.id}`}\r\n                  >\r\n                    {document.name}\r\n                  </CLabel>\r\n                  <CInputFile key={`of-${worker.id}-${document.id}`}\r\n                    id={`file-${document.id}`}\r\n                    name={`${worker.id}-${document.id}`}\r\n                    onChange={this.handleFileUpload}\r\n                  />\r\n\r\n                </React.Fragment>\r\n\r\n              )\r\n            })}\r\n          </CFormGroup>\r\n        )\r\n      })\r\n    } else {\r\n      downloadButtonArray = null;\r\n      workerList = null\r\n    }\r\n    return (\r\n      <CRow>\r\n        <CCol>\r\n          <CForm onSubmit={this.handleSubmit}>\r\n            <DjangoCSRFToken />\r\n            <CFormGroup>\r\n              {downloadButtonArray}\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              {workerList}\r\n            </CFormGroup>\r\n\r\n            <CFormGroup>\r\n              <CButton type=\"submit\" color=\"success\" variant=\"outline\" block>Save changes</CButton>\r\n            </CFormGroup>\r\n            {this.state.error\r\n              ? <p>{this.state.error}</p>\r\n              : null\r\n            }\r\n          </CForm>\r\n        </CCol >\r\n      </CRow >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    workers: state.entityListTable.tableData,\r\n    company: state.currentUser.company,\r\n    role: state.currentUser.role,\r\n    contractor: state.currentUser.id,\r\n    documents: state.additionalEntityListTable.tableData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getProfileFetch: () => dispatch(getProfileFetch()),\r\n  getWorkerList: () => dispatch(getWorkerList()),\r\n  getDocumentList: (params, additional) => dispatch(getDocumentList(params, additional)),\r\n  setProjectId: (id) => dispatch(setProjectId(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkerAssign)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA0BA;AAAA;AAEA;AACA;AAGA;AACA;AADA;AAEA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AADA;AAGA;AACA;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAgBA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA8BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AAFA;AADA;AAMA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AADA;AAKA;AACA;AACA;AACA;AAHA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAtLA;AACA;AAuLA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAAA;AACA;AAMA;;;;A","sourceRoot":""}