{"version":3,"file":"14.main.js","sources":["webpack:///./src/components/views/contractors/ContractorDetail.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { getProfileFetch } from '../../../actions'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    CForm,\r\n    CFormGroup,\r\n    CInput,\r\n    CLabel, CRow,\r\n    CCol,\r\n    CButton\r\n} from \"@coreui/react\";\r\nimport DjangoCSRFToken from 'django-react-csrftoken'\r\nimport { FoxApiService } from '../../../services'\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nclass ContractorDetail extends Component {\r\n\r\n    state = {\r\n        username: \"\",\r\n        email: \"\",\r\n        related_company: \"\",\r\n        company: this.props.company,\r\n        role: \"Contr\",\r\n        error: false\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = async event => {\r\n        event.preventDefault();\r\n        this.formData = this.state;\r\n        delete this.formData.error;\r\n        await foxApi.updateEntityOf('contractors', this.props.match.params.id, this.formData).then(() => {\r\n            this.props.history.goBack()\r\n        },\r\n            (error) => {\r\n                console.error(error);\r\n                this.setState({\r\n                    error: 'Contractor update failed!' +\r\n                        ' Please check your input and try again!' +\r\n                        ' In case this problem repeats, please contact your administrator!'\r\n                })\r\n            })\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.props.getProfileFetch()\r\n            .then(() => foxApi.getDetailsOf('contractors', this.props.match.params.id))\r\n            .then((data) => this.setState({ ...data }))\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        console.log(\"will unmount\");\r\n    }\r\n\r\n    render = () => {\r\n        console.log(this.state);\r\n        return (\r\n            <CRow>\r\n                <CCol>\r\n                    <CForm\r\n                        onSubmit={this.handleSubmit}\r\n                    >\r\n                        <DjangoCSRFToken />\r\n                        <CFormGroup>\r\n                            <CLabel htmlFor=\"username\">Contractor username</CLabel>\r\n                            <CInput\r\n                                id=\"username\"\r\n                                name='username'\r\n                                placeholder=\"Username\"\r\n                                value={this.state.username}\r\n                                onChange={this.handleChange}\r\n                                required />\r\n                        </CFormGroup>\r\n                        <CFormGroup>\r\n                            <CLabel htmlFor=\"email\">Contractor email</CLabel>\r\n                            <CInput\r\n                                id=\"email\"\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                placeholder=\"Email\"\r\n                                value={this.state.email}\r\n                                onChange={this.handleChange}\r\n                                required\r\n                            />\r\n                        </CFormGroup>\r\n                        <CFormGroup>\r\n                            <CLabel htmlFor=\"username\">Contractor company</CLabel>\r\n                            <CInput\r\n                                id=\"related_company\"\r\n                                name='related_company'\r\n                                placeholder=\"Company name\"\r\n                                value={this.state.related_company}\r\n                                onChange={this.handleChange}\r\n                                required />\r\n                        </CFormGroup>\r\n                        <CFormGroup>\r\n                            <CButton type=\"submit\" color=\"dark\" variant=\"outline\" block>Create contractor</CButton>\r\n                        </CFormGroup>\r\n                        {this.state.error\r\n                            ? <p>{this.state.error}</p>\r\n                            : null\r\n                        }\r\n                    </CForm>\r\n                </CCol>\r\n            </CRow >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        company: state.currentUser.company,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getProfileFetch: () => dispatch(getProfileFetch())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContractorDetail)\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AADA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAjGA;AACA;AAkGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}