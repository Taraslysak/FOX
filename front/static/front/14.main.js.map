{"version":3,"file":"14.main.js","sources":["webpack:///./src/components/views/documents/DocumentDetail.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { getProfileFetch } from '../../../actions'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel, CRow,\r\n  CCol,\r\n  CSelect,\r\n  CLink,\r\n  CButton,\r\n  CInputFile\r\n} from \"@coreui/react\";\r\nimport DjangoCSRFToken from 'django-react-csrftoken'\r\nimport { FoxApiService } from '../../../services'\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nconst targetTypes = [\r\n  { id: \"Contractor\", target_type: \"Contractor\" },\r\n  { id: \"Worker\", target_type: \"Worker\" }\r\n]\r\n\r\nclass DocumentDetail extends Component {\r\n\r\n  state = {\r\n    name: \"\",\r\n    file: \"\",\r\n    project: this.props.match.params.id,\r\n    target_type: -1,\r\n    url_to_doc: \"\",\r\n    error: false\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  downloadFile = async () => {\r\n    await foxApi.downloadDocument(this.props.match.params.doc_id)\r\n      .then((blob) => {\r\n        const url = window.URL.createObjectURL(new Blob([blob]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        const filename = this.state.file.split('/').pop();\r\n        link.setAttribute('download', filename);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.parentNode.removeChild(link);\r\n      })\r\n      .then(() => { console.log('file downloaded') })\r\n      .catch((error) => {\r\n        console.error('File download failed!');\r\n        console.error(error)\r\n      })\r\n  }\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    this.requestData = this.state;\r\n    delete this.requestData.error;\r\n    delete this.requestData.upload_option;\r\n    this.formData = new FormData\r\n    Object.entries(this.requestData).forEach(([key, value]) => {\r\n      this.formData.append(key, value);\r\n    })\r\n    await foxApi.updateEntityOf('documents', this.props.match.params.doc_id, this.formData).then(() => {\r\n      this.props.history.goBack()\r\n    },\r\n      (error) => {\r\n        console.error(error);\r\n        this.setState({\r\n          error: 'Document update failed!' +\r\n            ' Please check your input and try again!' +\r\n            ' In case this problem repeats, please contact your administrator!'\r\n        })\r\n      })\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.getProfileFetch()\r\n      .then(() => foxApi.getDetailsOf('documents', this.props.match.params.doc_id))\r\n      .then((data) => this.setState({ ...data }))\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <CRow>\r\n        <CCol>\r\n          <CForm\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            <DjangoCSRFToken />\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"name\">Name</CLabel>\r\n              <CInput\r\n                id=\"name\"\r\n                name='name'\r\n                placeholder=\"Enter document name\"\r\n                value={this.state.name}\r\n                onChange={this.handleChange}\r\n                required />\r\n            </CFormGroup>\r\n\r\n            {this.state.url_to_doc ?\r\n              <CFormGroup>\r\n                <CLabel htmlFor=\"url_to_doc\">Url to document</CLabel>\r\n                <CInput\r\n                  type=\"url\"\r\n                  id=\"url_to_doc\"\r\n                  name=\"url_to_doc\"\r\n                  placeholder=\"https://example.com\"\r\n                  pattern=\"https://.*\"\r\n                  value={this.state.url_to_doc}\r\n                  onChange={this.handleChange}\r\n                  required />\r\n              </CFormGroup>\r\n              :\r\n              <React.Fragment>\r\n                <CFormGroup>\r\n                  {/* <CLink\r\n                    className=\"btn btn-outline-success\"\r\n                    href={this.state.file}\r\n                    target=\"_blank\"\r\n                    download\r\n                  >\r\n                    Link to download current file\r\n                  </CLink> */}\r\n                  <CButton\r\n                    variant=\"outline\"\r\n                    color=\"success\"\r\n                    onClick={this.downloadFile}\r\n                  >\r\n                    Link to download current file\r\n                  </CButton>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"file\">Upload new File</CLabel>\r\n                  <CInputFile id=\"file\" name=\"file\" onChange={this.handleFileUpload}\r\n                    required />\r\n                </CFormGroup>\r\n              </React.Fragment>\r\n            }\r\n\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"target_type\">Target Type</CLabel>\r\n              <CSelect\r\n                id=\"target_type\"\r\n                name=\"target_type\"\r\n                placeholder=\"Choose target type\"\r\n                value={this.state.target_type}\r\n                onChange={this.handleChange}\r\n                required\r\n              >\r\n                {targetTypes.map((option) => {\r\n                  return (\r\n                    <option key={option.id} value={option.id}>{option.target_type}</option>\r\n                  )\r\n                }\r\n                )}\r\n              </CSelect>\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CButton type=\"submit\" color=\"dark\" variant=\"outline\" block>Update Document</CButton>\r\n            </CFormGroup>\r\n            {this.state.error\r\n              ? <p>{this.state.error}</p>\r\n              : null\r\n            }\r\n          </CForm>\r\n        </CCol>\r\n      </CRow >\r\n    )\r\n  }\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//   }\r\n// }\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getProfileFetch: () => dispatch(getProfileFetch())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(DocumentDetail)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAWA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAkBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AARA;AAAA;AAUA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAIA;AADA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAsBA;AACA;AACA;AAHA;AASA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAEA;AAKA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAzJA;AA4JA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}