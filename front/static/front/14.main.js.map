{"version":3,"file":"14.main.js","sources":["webpack:///./src/components/views/documents/DocumentCreate.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel,\r\n  CRow,\r\n  CCol,\r\n  CSelect,\r\n  CButton,\r\n  CInputFile,\r\n} from \"@coreui/react\";\r\nimport DjangoCSRFToken from 'django-react-csrftoken';\r\nimport { FoxApiService } from '../../../services';\r\nimport { getProfileFetch, } from '../../../actions';\r\n\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nconst uploadOptions = [\r\n  { id: 1, name: \"URL\" },\r\n  { id: 2, name: \"File upload\" }\r\n]\r\n\r\nconst targetTypes = [\r\n  { id: -1, target_type: \"Choose target type\" },\r\n  { id: \"Contractor\", target_type: \"Contractor\" },\r\n  { id: \"Worker\", target_type: \"Worker\" }\r\n]\r\n\r\nclass DocumentCreate extends Component {\r\n\r\n  state = {\r\n    name: \"\",\r\n    file: \"\",\r\n    project: this.props.match.params.id,\r\n    target_type: -1,\r\n    url_to_doc: \"\",\r\n    upload_option: 1,\r\n    error: false\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n  handleFileUpload = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.files[0]\r\n    });\r\n  }\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    if (parseInt(this.state.target_type) === -1) {\r\n      this.setState({\r\n        error: 'Target type was not selected! Please, choose target type form the list'\r\n      })\r\n    } else {\r\n      this.requestData = this.state;\r\n      delete this.requestData.error;\r\n      delete this.requestData.upload_option;\r\n      this.formData = new FormData\r\n      Object.entries(this.requestData).forEach(([key, value]) => {\r\n        this.formData.append(key, value);\r\n      })\r\n      await foxApi.createEntityWithFile('documents', this.formData)\r\n        .then(() => {\r\n          this.props.history.goBack()\r\n        },\r\n          (error) => {\r\n            console.error(error);\r\n            this.setState({\r\n              error: 'Document creation failed!' +\r\n                ' Please check your input and try again!' +\r\n                ' In case this problem repeats, please contact your administrator!'\r\n            })\r\n          })\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.getProfileFetch()\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <CRow>\r\n        <CCol>\r\n          <CForm\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            <DjangoCSRFToken />\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"name\">Name</CLabel>\r\n              <CInput\r\n                id=\"name\"\r\n                name='name'\r\n                placeholder=\"Enter document name\"\r\n                value={this.state.name}\r\n                onChange={this.handleChange}\r\n                required />\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"upload_option\">File upload option</CLabel>\r\n              <CSelect\r\n                id=\"upload_option\"\r\n                name=\"upload_option\"\r\n                placeholder=\"Choose contractor\"\r\n                value={this.state.upload_option}\r\n                onChange={this.handleChange}\r\n                required\r\n              >\r\n                {uploadOptions.map((option) => {\r\n                  return (\r\n                    <option key={option.id} value={option.id}>{option.name}</option>\r\n                  )\r\n                })\r\n                }\r\n              </CSelect>\r\n            </CFormGroup>\r\n\r\n            {this.state.upload_option == 1 ?\r\n              <CFormGroup>\r\n                <CLabel htmlFor=\"url_to_doc\">Url to document</CLabel>\r\n                <CInput\r\n                  type=\"url\"\r\n                  id=\"url_to_doc\"\r\n                  name=\"url_to_doc\"\r\n                  placeholder=\"https://example.com\"\r\n                  pattern=\"https://.*\"\r\n                  value={this.state.url_to_doc}\r\n                  onChange={this.handleChange}\r\n                  required />\r\n              </CFormGroup>\r\n              : <CFormGroup>\r\n                <CLabel htmlFor=\"file\">File</CLabel>\r\n                <CInputFile id=\"file\" name=\"file\" onChange={this.handleFileUpload}\r\n                  required />\r\n              </CFormGroup>\r\n            }\r\n\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"target_type\">Target Type</CLabel>\r\n              <CSelect\r\n                id=\"target_type\"\r\n                name=\"target_type\"\r\n                placeholder=\"Choose target type\"\r\n                value={this.state.target_type}\r\n                onChange={this.handleChange}\r\n                required\r\n              >\r\n                {targetTypes.map((option) => {\r\n                  return (\r\n                    <option key={option.id} value={option.id}>{option.target_type}</option>\r\n                  )\r\n                }\r\n                )}\r\n              </CSelect>\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CButton type=\"submit\" color=\"dark\" variant=\"outline\" block>Create Document</CButton>\r\n            </CFormGroup>\r\n            {this.state.error\r\n              ? <p>{this.state.error}</p>\r\n              : null\r\n            }\r\n          </CForm>\r\n        </CCol>\r\n      </CRow >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    company: state.currentUser.company,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getProfileFetch: () => dispatch(getProfileFetch()),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(DocumentCreate))\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AAGA;AACA;AAAA;AACA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AACA;AALA;AAAA;AACA;AADA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAdA;AAAA;AAiBA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAIA;AADA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAEA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAEA;AAKA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAhJA;AACA;AAiJA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}