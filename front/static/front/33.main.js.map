{"version":3,"file":"33.main.js","sources":["webpack:///./src/components/forms/FoxProjectDocumentDownloadUploadFormGroup.js","webpack:///./src/components/views/projects/ProjectUploadDocs.js"],"sourcesContent":["import React from 'react'\n\nimport {\n  CCard,\n  CCardBody,\n  CFormGroup,\n  CRow,\n  CCol,\n  CLabel,\n  CInputFile,\n  CButton,\n  CLink\n} from '@coreui/react'\n\n\nconst FoxProjectDocumentDownLoadUploadFormGroup = props => {\n  return (\n    <CCard>\n      <CCardBody>\n        <CFormGroup key={`fg-${props.document.id}`}>\n\n          <CLabel key={`lb-${props.document.id}`} htmlFor={props.document.id}><h5>{props.document.name}</h5> </CLabel>\n          {props.document.url_to_doc ?\n            <CRow>\n              <CCol>\n                <CLink\n                  key={`dl-${props.document.id}`}\n                  href={props.document.url_to_doc}\n                  target=\"_blank\"\n                  className=\"btn btn-ghost-primary\"\n                >Open this document in Google Docs\n                </CLink>\n              </CCol>\n            </CRow>\n            :\n            <CRow>\n              <CCol md=\"3\">\n                <CButton\n                  variant=\"outline\"\n                  color=\"primary\"\n                  key={`cb-${props.document.id}`}\n                  id={props.document.id}\n                  name={props.document.id}\n                  value={props.document.filename}\n                  onClick={props.downloadFile}\n                >Download template for this document\n                </CButton>\n              </CCol>\n              <CCol md=\"5\">\n                <CLabel key={`lb-${props.document.id}`} htmlFor={props.document.id}><strong>Upload filled up document:</strong> </CLabel>\n                <CInputFile key={`of-${props.document.id}`}\n                  id={`file-${props.document.id}`}\n                  name={`${props.document.id}`}\n                  onChange={props.handleFileUpload}\n                />\n              </CCol>\n            </CRow>\n          }\n        </CFormGroup>\n      </CCardBody>\n    </CCard>\n\n  )\n\n}\n\nexport default FoxProjectDocumentDownLoadUploadFormGroup","import React, { Component } from 'react'\nimport { getProfileFetch, getDocumentList, setProjectId } from '../../../actions'\nimport { connect } from 'react-redux'\nimport {\n  CForm,\n  CFormGroup,\n  CLabel, CRow,\n  CCol,\n  CLink,\n  CButton,\n  CInputFile\n} from \"@coreui/react\";\nimport DjangoCSRFToken from 'django-react-csrftoken'\nimport { FoxApiService } from '../../../services'\nimport FoxProjectDocumentDownLoadUploadFormGroup from '../../forms/FoxProjectDocumentDownloadUploadFormGroup';\n\nconst foxApi = new FoxApiService();\n\nclass ProjectUploadDocs extends Component {\n\n  state = {\n    filename: \"\",\n    file_id: \"\",\n    project: this.props.match.params.id,\n    url_to_doc: \"\",\n    upload_files: {},\n    error: false,\n  }\n\n  downloadFile = async (e) => {\n    this.setState({\n      filename: e.target.value,\n      file_id: e.target.name\n    }, () => {\n      foxApi.downloadDocument(this.state.file_id)\n        .then((blob) => {\n          const url = window.URL.createObjectURL(new Blob([blob]));\n          const link = document.createElement('a');\n          link.href = url;\n          const filename = this.state.filename.split('/').pop();\n          link.setAttribute('download', filename);\n          document.body.appendChild(link);\n          link.click();\n          link.parentNode.removeChild(link);\n        })\n        .then(() => { console.log('file downloaded') })\n        .catch((error) => {\n          console.error('File download failed!');\n          console.error(error)\n        })\n    })\n  }\n\n  handleFileUpload = event => {\n    console.log(\"initila state\", this.state);\n    const { upload_files } = this.state;\n    upload_files[event.target.name] = event.target.files[0];\n    this.setState({\n      upload_files: upload_files\n    });\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    const { upload_files } = this.state;\n    console.log(upload_files);\n\n    Object.entries(upload_files).forEach(([key, value]) => {\n\n      const uploadFilesData = new FormData();\n      uploadFilesData.append('file', value);\n      upload_files[key] = uploadFilesData\n    })\n\n    await Promise.all([\n      Object.entries(upload_files).forEach(([key, value]) => {\n        foxApi.patchEntityWithFiles(\"documents\", key, value);\n      })\n    ])\n      .then(() => {\n        this.props.history.goBack()\n      })\n      .catch((error) => {\n        console.error(error);\n        this.setState({\n          error: 'Document update failed!' +\n            ' Please check your input and try again!' +\n            ' In case this problem repeats, please contact your administrator!'\n        })\n      })\n  }\n\n  componentDidMount = async () => {\n    await this.props.getProfileFetch()\n      .then(() => this.props.getDocumentList({\n        target_type: \"Contractor\",\n        project_id: this.props.match.params.id\n      }, false))\n  }\n\n  render = () => {\n    let documentWidgetArray = []\n\n    if (this.props.documents) {\n      documentWidgetArray = this.props.documents.map((document) => {\n        return (\n          <FoxProjectDocumentDownLoadUploadFormGroup\n            document={document}\n            handleFileUpload={this.handleFileUpload}\n            downloadFile={this.downloadFile}\n          />\n        )\n      })\n    }\n\n    return (\n      <CRow>\n        <CCol>\n          <CForm\n            onSubmit={this.handleSubmit}\n          >\n            <DjangoCSRFToken />\n            {documentWidgetArray}\n            <CFormGroup>\n              <CButton type=\"submit\" color=\"dark\" variant=\"outline\" block>Submit documents</CButton>\n            </CFormGroup>\n            {this.state.error\n              ? <p>{this.state.error}</p>\n              : null\n            }\n          </CForm>\n        </CCol>\n      </CRow >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    documents: state.entityListTable.tableData\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getProfileFetch: () => dispatch(getProfileFetch()),\n  getDocumentList: (params, additional) => dispatch(getDocumentList(params, additional)),\n  setProjectId: (id) => dispatch(setProjectId(id))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectUploadDocs)\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAYA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAcA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuBA;AACA;AADA;AAGA;AACA;AAAA;AACA;AADA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAaA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAIA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AArHA;AACA;AAsHA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}