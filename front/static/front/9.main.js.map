{"version":3,"file":"9.main.js","sources":["webpack:///./src/components/tables/FoxEntityListTable.js","webpack:///./src/components/tables/WorkStatusDropdown.js","webpack:///./src/components/views/projects/ProjectList.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  CBadge,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCardTitle,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CLink\r\n} from '@coreui/react'\r\nimport WorkStatusDropdown from './WorkStatusDropdown'\r\n\r\n\r\nclass FoxEntityListTable extends Component {\r\n\r\n  alertOnClick = (e) => {\r\n    // this.props.history.push(`${this.props.match.url}/${e.id}`)\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <CRow>\r\n        <CCol>\r\n          <CCard>\r\n            <CCardHeader\r\n              className=\"d-flex justify-content-between\">\r\n              <CCardTitle>\r\n                {this.props.tableName}\r\n              </CCardTitle>\r\n              {this.props.tableName === \"Projects\" && this.props.role === \"Contr\"\r\n                ?\r\n                null\r\n                :\r\n                <CLink\r\n                  className=\"btn btn-outline-success\"\r\n                  to={`${this.props.match.url}/new`}\r\n                >\r\n                  Add new\r\n                </CLink>\r\n              }\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CDataTable\r\n                items={this.props.tableData ? this.props.tableData : []}\r\n                fields={this.props.fields ? this.props.fields : []}\r\n                clickableRows\r\n                hover\r\n                striped\r\n                bordered\r\n                sorter\r\n                footer\r\n                tableFilter\r\n                columnFilter\r\n                size=\"sm\"\r\n                itemsPerPage={10}\r\n                itemsPerPageSelect\r\n                pagination\r\n                onRowClick={this.alertOnClick}\r\n                scopedSlots={{\r\n                  'application_status':\r\n                    (item) => (\r\n                      <td>\r\n                        <CBadge color={this.props.getBadge(item.application_status)}>\r\n                          {item.application_status}\r\n                        </CBadge>\r\n                      </td>\r\n                    ),\r\n                  'work_status':\r\n                    (item) => (\r\n                      <td>\r\n                        <CBadge color={this.props.getBadge(item.work_status)}>\r\n                          {item.work_status}\r\n                        </CBadge>\r\n                        <WorkStatusDropdown key={item.id} item={item} {...this.props} />\r\n                      </td>\r\n                    )\r\n                }}\r\n              />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  role: state.currentUser.role\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, null)(FoxEntityListTable)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { FoxApiService } from '../../services'\r\nimport { getProjectList } from '../../actions'\r\nimport { CDropdown, CDropdownToggle, CDropdownItem, CDropdownMenu } from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nconst choices = [\r\n\t{ ready: 'Ready to start' },\r\n\t{ in_progress: 'In progress' },\r\n\t{ stopped: 'Stopped' },\r\n\t{ completed: 'Completed' },\r\n\t{ extended: 'Extended' },\r\n]\r\n\r\nconst handleClick = (value, event) => {\r\n\tconsole.log(event);\r\n\tconsole.log(value);\r\n}\r\n\r\nconst WorkStatusDropdown = props => {\r\n\treturn (\r\n\t\t<CDropdown >\r\n\t\t\t<CDropdownToggle>\r\n\t\t\t\t<CIcon name={'cilSettings'} size={'md'} />\r\n\t\t\t</CDropdownToggle>\r\n\t\t\t<CDropdownMenu className=\"p-0\" placement=\"bottom-end\">\r\n\t\t\t\t{choices.map((choice) => {\r\n\t\t\t\t\tconst [value, name] = Object.entries(choice)[0]\r\n\t\t\t\t\treturn <CDropdownItem\r\n\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\tonClick={event => handleClick(value, event)}\r\n\t\t\t\t\t>{name}</CDropdownItem>\r\n\t\t\t\t})}\r\n\r\n\t\t\t</CDropdownMenu>\r\n\t\t</CDropdown >\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\trole: state.currentUser.role\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\t//pass\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkStatusDropdown)","import React, { Component } from 'react'\r\nimport FoxEntityListTable from '../../tables/FoxEntityListTable'\r\nimport { getProfileFetch, getProjectList, setProjectId } from '../../../actions'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst getBadge = status => {\r\n  switch (status) {\r\n    case 'Created': return 'secondary'\r\n    case 'Submitted': return 'warning'\r\n    case 'Approved': return 'success'\r\n    case 'Rejected': return 'danger'\r\n    case 'Application processing': return 'secondary'\r\n    case 'Ready to start': return 'success'\r\n    case 'Works started': return 'info'\r\n    case 'Works finished': return 'warning'\r\n    case 'Extended': return 'primary'\r\n    case 'Closed': return 'dark'\r\n    default: return 'primary'\r\n  }\r\n}\r\n\r\n\r\nclass ProjectList extends Component {\r\n\r\n  componentDidMount = async () => {\r\n    this.props.setProjectId(this.props.match.params.id)\r\n    await this.props.getProfileFetch()\r\n      .then(() => this.props.getProjectList())\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <FoxEntityListTable\r\n        {...this.props}\r\n        tableName='Projects'\r\n        fields={this.props.projectTable.fields}\r\n        getBadge={getBadge}\r\n        tableData={this.props.projectTable.tableData}\r\n      />\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    projectTable: state.entityListTable\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getProfileFetch: () => dispatch(getProfileFetch()),\r\n  getProjectList: () => dispatch(getProjectList()),\r\n  setProjectId: () => dispatch(setProjectId())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectList)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAWA;AACA;AAEA;;;;;;;;;;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AAKA;AADA;AAUA;AACA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAFA;AAOA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AALA;AAVA;AAhBA;AAyCA;AACA;;;;;AAvEA;AACA;AAwEA;AAAA;AACA;AADA;AAAA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AAKA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAXA;AAaA;AACA;AAEA;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AALA;AAQA;AACA;;;;;AAnBA;AACA;AAqBA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}