{"version":3,"file":"9.main.js","sources":["webpack:///./src/components/activity_log/ActivityLog.js","webpack:///./src/components/activity_log/index.js","webpack:///./src/components/views/projects/ProjectDetail.js","webpack:///./src/components/views/projects/optionsLists.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { CCard, CCardHeader, CCardBody, CListGroup, CListGroupItem, CButton, CCollapse } from '@coreui/react'\nimport { FoxApiService } from '../../services'\nimport { connect } from 'react-redux'\n\nconst foxApi = new FoxApiService()\n\nclass ActivityLog extends Component {\n\n  state = {\n    items: [],\n    show: false\n  }\n\n  handleClick = () => {\n    this.setState({\n      show: !this.state.show\n    })\n  }\n\n  componentDidMount = () => {\n    foxApi.getEntityList(\"activities\", { project_id: this.props.projectId })\n      .then(data => {\n        this.setState({\n          items: data\n        })\n      })\n      .catch(error => console.log(error))\n  }\n\n  render = () => {\n    const { items, show } = this.state;\n    console.log(this.state);\n    return (\n      <CCard>\n        <CCardHeader>\n          <strong>Activity log</strong>\n          <CButton color=\"link\" onClick={this.handleClick}>{show ? 'Hide' : 'Show'}</CButton>\n          <CCollapse show={show}>\n            <CCardBody>\n              <CListGroup flush>\n                {items ?\n                  items.map((item) => {\n                    return (\n                      <CListGroupItem key={item.id}>\n                        {item.message}\n                      </CListGroupItem>\n                    )\n                  })\n                  : null}\n              </CListGroup>\n            </CCardBody>\n          </CCollapse>\n\n        </CCardHeader>\n      </CCard>\n    )\n  }\n}\n\nexport default ActivityLog\n","import ActivityLog from './ActivityLog'\n\nexport { ActivityLog }","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport DjangoCSRFToken from 'django-react-csrftoken'\nimport {\n  CForm,\n  CFormGroup,\n  CInput,\n  CLabel, CRow,\n  CCol,\n  CTextarea,\n  CLink,\n  CButton,\n  CEmbed,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardTitle,\n} from \"@coreui/react\";\n\nimport { getProfileFetch, getContractorList, setProjectId } from '../../../actions'\nimport { FoxApiService } from '../../../services'\nimport { ActivityLog } from '../../activity_log'\nimport { FoxSwitchGroup } from '../../../utils'\nimport { FoxReactSelectFormGroup } from '../../forms'\nimport { permitOptions } from './optionsLists'\n\nconst foxApi = new FoxApiService();\n\nclass ProjectDetail extends Component {\n\n  state = {\n    name: \"\",\n    location: \"\",\n    description: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    company: this.props.company,\n    contractor: \"-1\",\n    work_at_height: false,\n    lifting_work: false,\n    confined_space: false,\n    hot_work: false,\n    chemical_handling: false,\n    work_alone: false,\n    work_at_sensitive_area: false,\n    cold_work: false,\n    error: false\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleCheck = event => {\n    this.setState({\n      [event.target.name]: event.target.checked\n    })\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    if (parseInt(this.state.contractor) < 0) {\n      this.setState({\n        error: 'Contractor was not selected! Please, choose contractor form the list'\n      })\n    } else {\n      this.formData = this.state;\n      delete this.formData.error;\n      await foxApi.updateEntityOf('projects', this.props.match.params.id, this.formData).then(() => {\n        this.props.history.goBack()\n      },\n        (error) => {\n          console.error(error);\n          this.setState({\n            error: 'Project update failed!' +\n              ' Please check your input and try again!' +\n              ' In case this problem repeats, please contact your administrator!'\n          })\n        })\n    }\n  }\n\n  componentDidMount = async () => {\n    await this.props.getProfileFetch()\n      .then(() => foxApi.getDetailsOf('projects', this.props.match.params.id))\n      .then((data) => this.setState({ ...data }))\n      .then(() => this.props.getContractorList())\n      .then(() => this.props.setProjectId(this.props.match.params.id))\n  }\n\n  render = () => {\n    const options = this.props.options ? this.props.options.map(option => { return { value: option.id, label: option.username } }) : null\n    console.log(this.state);\n    return (\n      <CRow>\n        <CCol>{this.props.role === 'CliAdm' ?\n          <CCard>\n            <CCardHeader>\n              <CCardTitle>Project Details</CCardTitle>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                onSubmit={this.handleSubmit}\n              >\n                <DjangoCSRFToken />\n                <CFormGroup>\n                  <CLabel htmlFor=\"name\">Name</CLabel>\n                  <CInput\n                    id=\"name\"\n                    name='name'\n                    placeholder=\"Enter project name\"\n                    value={this.state.name}\n                    onChange={this.handleChange}\n                    required />\n                </CFormGroup>\n                <CFormGroup>\n                  <CLabel htmlFor=\"location\">Location of works</CLabel>\n                  <CInput\n                    id=\"location \"\n                    name=\"location\"\n                    placeholder=\"Project Works Location\"\n                    value={this.state.location}\n                    onChange={this.handleChange}\n                    required />\n                </CFormGroup>\n                <CFormGroup>\n                  <CLabel htmlFor=\"description\">Description</CLabel>\n                  <CTextarea\n                    id=\"descrption\"\n                    name=\"description\"\n                    placeholder=\"Please, enter short description of the projet\"\n                    value={this.state.description}\n                    onChange={this.handleChange}\n                    required\n                  />\n                </CFormGroup>\n                <CFormGroup>\n                  <CRow>\n                    <CCol lg=\"6\">\n                      <CLabel htmlFor=\"start_date\">Start Date</CLabel>\n                      <CInput\n                        type=\"datetime-local\"\n                        id=\"start_date\"\n                        name=\"start_date\"\n                        value={this.state.start_date}\n                        onChange={this.handleChange}\n                        required\n                      />\n                    </CCol>\n                    <CCol lg=\"6\">\n                      <CLabel htmlFor=\"end_date\">End Date</CLabel>\n                      <CInput\n                        type=\"datetime-local\"\n                        id=\"end_date\"\n                        name=\"end_date\"\n                        value={this.state.end_date}\n                        onChange={this.handleChange}\n                        required\n                      />\n                    </CCol>\n                  </CRow>\n                </CFormGroup>\n                <FoxReactSelectFormGroup\n                  options={options}\n                  inputInfo=\"contractor\"\n                  inputValue={this.state.contractor}\n                  handleChange={this.handleReactSelect}\n                />\n                <CFormGroup>\n                  <CLink\n                    className=\"btn btn-outline-dark mr-3\"\n                    to={`${this.props.match.url}/ptw`}\n                  >\n                    See Permission To Work\n              </CLink>\n                  <CLink\n                    className=\"btn btn-outline-dark\"\n                    to={`${this.props.match.url}/documents`}\n                  >\n                    Attached Documents\n              </CLink>\n                </CFormGroup>\n                <FoxSwitchGroup\n                  groupLabel='Choose the related hazardous work\n                  from the list below:'\n                  options={permitOptions}\n                  handleCheck={this.handleCheck}\n                  parentState={this.state}\n                />\n                <CButton shape=\"pill\" type=\"submit\" color=\"success\" variant=\"outline\" block>Save changes</CButton>\n                {this.state.error\n                  ? <p>{this.state.error}</p>\n                  : null\n                }\n              </CForm>\n            </CCardBody>\n          </CCard>\n\n          :\n          <React.Fragment>\n            <ActivityLog projectId={this.props.match.params.id} />\n            <CEmbed\n              ratio=\"16by9\"\n            >\n              <iframe src={`${window.location.origin}/api/ptw/${this.props.match.params.id}`} />\n            </CEmbed>\n          </React.Fragment>\n        }\n        </CCol>\n      </CRow >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    company: state.currentUser.company,\n    options: state.entityListTable.tableData,\n    role: state.currentUser.role\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getProfileFetch: () => dispatch(getProfileFetch()),\n  getContractorList: () => dispatch(getContractorList()),\n  setProjectId: (id) => dispatch(setProjectId(id))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDetail)\n","const permitOptions = [\n    \"work_at_height\",\n    \"lifting_work\",\n    \"confined_space\",\n    \"hot_work\",\n    \"chemical_handling\",\n    \"work_alone\",\n    \"work_at_sensitive_area\",\n    \"cold_work\",\n]\n\nexport { permitOptions }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AAIA;AASA;AACA;;;;;AAnDA;AACA;AAoDA;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AACA;AALA;AAAA;AACA;AADA;AAQA;AACA;AATA;AAAA;AAWA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AADA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAYA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAOA;AACA;AAFA;AAQA;AAEA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAEA;AADA;AAGA;AAAA;AAOA;AACA;;;;;AA3LA;AACA;AA4LA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;;;;;;;;;ACvOA;AAAA;AAAA;;;;;A","sourceRoot":""}