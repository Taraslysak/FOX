{"version":3,"file":"17.main.js","sources":["webpack:///./src/components/views/documents/DocumentCreate.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  CForm,\n  CFormGroup,\n  CInput,\n  CLabel,\n  CRow,\n  CCol,\n  CSelect,\n  CButton,\n  CInputFile,\n} from \"@coreui/react\";\nimport DjangoCSRFToken from 'django-react-csrftoken';\nimport { FoxApiService } from '../../../services';\nimport { getProfileFetch, } from '../../../actions';\n\n\nconst foxApi = new FoxApiService();\n\nconst uploadOptions = [\n  { id: 1, name: \"URL\" },\n  { id: 2, name: \"File upload\" }\n]\n\nclass DocumentCreate extends Component {\n\n  state = {\n    name: \"\",\n    file: \"\",\n    project: this.props.match.params.id,\n    url_to_doc: \"\",\n    upload_option: 1,\n    error: false\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n  handleFileUpload = event => {\n    this.setState({\n      [event.target.name]: event.target.files[0]\n    });\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    this.requestData = this.state;\n    delete this.requestData.error;\n    delete this.requestData.upload_option;\n    this.formData = new FormData\n    Object.entries(this.requestData).forEach(([key, value]) => {\n      this.formData.append(key, value);\n    })\n    await foxApi.createEntityWithFile('documents', this.formData)\n      .then(() => {\n        this.props.history.push(`/projects/${this.props.match.params.id}/documents`)\n      },\n        (error) => {\n          console.error(error);\n          this.setState({\n            error: 'Document creation failed!' +\n              ' Please check your input and try again!' +\n              ' In case this problem repeats, please contact your administrator!'\n          })\n        })\n  }\n\n  componentDidMount = async () => {\n    await this.props.getProfileFetch()\n  }\n\n  render = () => {\n    return (\n      <CRow>\n        <CCol>\n          <CForm\n            onSubmit={this.handleSubmit}\n          >\n            <DjangoCSRFToken />\n            <CFormGroup>\n              <CLabel htmlFor=\"name\">Name</CLabel>\n              <CInput\n                id=\"name\"\n                name='name'\n                placeholder=\"Enter document name\"\n                value={this.state.name}\n                onChange={this.handleChange}\n                required />\n            </CFormGroup>\n            <CFormGroup>\n              <CLabel htmlFor=\"upload_option\">File upload option</CLabel>\n              <CSelect\n                id=\"upload_option\"\n                name=\"upload_option\"\n                placeholder=\"Choose contractor\"\n                value={this.state.upload_option}\n                onChange={this.handleChange}\n                required\n              >\n                {uploadOptions.map((option) => {\n                  return (\n                    <option key={option.id} value={option.id}>{option.name}</option>\n                  )\n                })\n                }\n              </CSelect>\n            </CFormGroup>\n\n            {this.state.upload_option == 1 ?\n              <CFormGroup>\n                <CLabel htmlFor=\"url_to_doc\">Url to document</CLabel>\n                <CInput\n                  type=\"url\"\n                  id=\"url_to_doc\"\n                  name=\"url_to_doc\"\n                  placeholder=\"https://example.com\"\n                  pattern=\"https://.*\"\n                  value={this.state.url_to_doc}\n                  onChange={this.handleChange}\n                  required />\n              </CFormGroup>\n              : <CFormGroup>\n                <CLabel htmlFor=\"file\">File</CLabel>\n                <CInputFile id=\"file\" name=\"file\" onChange={this.handleFileUpload}\n                  required />\n              </CFormGroup>\n            }\n            <CFormGroup>\n              <CButton type=\"submit\" color=\"dark\" variant=\"outline\" block>Create Document</CButton>\n            </CFormGroup>\n            {this.state.error\n              ? <p>{this.state.error}</p>\n              : null\n            }\n          </CForm>\n        </CCol>\n      </CRow >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    company: state.currentUser.company,\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getProfileFetch: () => dispatch(getProfileFetch()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(DocumentCreate))\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAGA;AACA;AAAA;AACA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AATA;AAAA;AAYA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAIA;AADA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAEA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAtHA;AACA;AAuHA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}