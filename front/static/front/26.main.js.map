{"version":3,"file":"26.main.js","sources":["webpack:///./src/components/views/documents/DocumentDetail.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { getProfileFetch } from '../../../actions'\nimport { connect } from 'react-redux'\nimport {\n  CForm,\n  CFormGroup,\n  CInput,\n  CLabel, CRow,\n  CCol,\n  CSelect,\n  CButton,\n  CInputFile\n} from \"@coreui/react\";\nimport DjangoCSRFToken from 'django-react-csrftoken'\nimport { FoxApiService } from '../../../services'\n\nconst foxApi = new FoxApiService();\n\nconst uploadOptions = [\n  { id: 1, name: \"URL\" },\n  { id: 2, name: \"File upload\" }\n]\n\nclass DocumentDetail extends Component {\n\n  state = {\n    name: \"\",\n    file: \"\",\n    project: this.props.match.params.id,\n    url_to_doc: \"\",\n    error: false,\n    upload_option: 2\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleFileUpload = event => {\n    this.setState({\n      [event.target.name]: event.target.files[0]\n    });\n  }\n\n  downloadFile = async () => {\n    await foxApi.downloadDocument(this.props.match.params.doc_id)\n      .then((blob) => {\n        const url = window.URL.createObjectURL(new Blob([blob]));\n        const link = document.createElement('a');\n        link.href = url;\n        const filename = this.state.file.split('/').pop();\n        link.setAttribute('download', filename);\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n      })\n      .then(() => { console.log('file downloaded') })\n      .catch((error) => {\n        console.error('File download failed!');\n        console.error(error)\n      })\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.requestData = this.state;\n    if (this.requestData.upload_option === \"1\") {\n      this.requestData.file = \"\"\n    } else {\n      this.requestData.url_to_doc = \"\"\n    }\n    delete this.requestData.error;\n    delete this.requestData.upload_option;\n    this.formData = new FormData\n    Object.entries(this.requestData).forEach(([key, value]) => {\n      this.formData.append(key, value);\n    })\n    this.formData.entries().forEach(entry => console.log(entry))\n    await foxApi.patchEntityWithFiles('documents', this.props.match.params.doc_id, this.formData).then(() => {\n      this.props.history.goBack()\n    },\n      (error) => {\n        console.error(error);\n        this.setState({\n          error: 'Document update failed!' +\n            ' Please check your input and try again!' +\n            ' In case this problem repeats, please contact your administrator!'\n        })\n      })\n  }\n\n  componentDidMount = async () => {\n    await this.props.getProfileFetch()\n      .then(() => foxApi.getDetailsOf('documents', this.props.match.params.doc_id))\n      .then((data) => {\n        data.url_to_doc ?\n          this.setState({\n            upload_option: 1,\n            ...data\n          })\n          :\n          this.setState({ ...data })\n      })\n  }\n\n  render = () => {\n    return (\n      <CRow>\n        <CCol>\n          <CForm\n            onSubmit={this.handleSubmit}\n          >\n            <DjangoCSRFToken />\n            <CFormGroup>\n              <CLabel htmlFor=\"name\">Name</CLabel>\n              <CInput\n                id=\"name\"\n                name='name'\n                placeholder=\"Enter document name\"\n                value={this.state.name}\n                onChange={this.handleChange}\n                required />\n            </CFormGroup>\n            <CFormGroup>\n              <CLabel htmlFor=\"upload_option\">File upload option</CLabel>\n              <CSelect\n                id=\"upload_option\"\n                name=\"upload_option\"\n                placeholder=\"Choose contractor\"\n                value={this.state.upload_option}\n                onChange={this.handleChange}\n                required\n              >\n                {uploadOptions.map((option) => {\n                  return (\n                    <option key={option.id} value={option.id}>{option.name}</option>\n                  )\n                })\n                }\n              </CSelect>\n            </CFormGroup>\n            {this.state.upload_option == 1 ?\n              <CFormGroup>\n                <CLabel htmlFor=\"url_to_doc\">Url to document</CLabel>\n                <CInput\n                  type=\"url\"\n                  id=\"url_to_doc\"\n                  name=\"url_to_doc\"\n                  placeholder=\"https://example.com\"\n                  pattern=\"https://.*\"\n                  value={this.state.url_to_doc}\n                  onChange={this.handleChange}\n                  required />\n              </CFormGroup>\n              :\n              <React.Fragment>\n                <CFormGroup>\n                  <CButton\n                    variant=\"outline\"\n                    color=\"success\"\n                    onClick={this.downloadFile}\n                  >\n                    Link to download current file\n                  </CButton>\n                </CFormGroup>\n                <CFormGroup>\n                  <CLabel htmlFor=\"file\">Upload new File</CLabel>\n                  <CInputFile id=\"file\" name=\"file\" onChange={this.handleFileUpload}\n                    required />\n                </CFormGroup>\n              </React.Fragment>\n            }\n            <CFormGroup>\n              <CButton type=\"submit\" color=\"dark\" variant=\"outline\" block>Update Document</CButton>\n            </CFormGroup>\n            {this.state.error\n              ? <p>{this.state.error}</p>\n              : null\n            }\n          </CForm>\n        </CCol>\n      </CRow >\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getProfileFetch: () => dispatch(getProfileFetch())\n})\n\nexport default connect(null, mapDispatchToProps)(DocumentDetail)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAUA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAkBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAfA;AAAA;AAgBA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AADA;AAMA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AAIA;AADA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAEA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAcA;AACA;AACA;AAHA;AASA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAnKA;AACA;AAoKA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}