{"version":3,"file":"18.main.js","sources":["webpack:///./src/components/views/approvals/ApprovalDetail.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport DjangoCSRFToken from 'django-react-csrftoken'\nimport { getProfileFetch, getDocumentList, getWorkerList } from '../../../actions'\nimport {\n  CForm,\n  CFormGroup,\n  CLabel,\n  CRow,\n  CCol,\n  CTextarea,\n  CLink,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCollapse\n} from \"@coreui/react\";\nimport { FoxApiService } from '../../../services'\nimport { DisplayFile, WorkerReview } from '../../../utils'\n\nconst foxApi = new FoxApiService();\n\nclass ProjectDetail extends Component {\n\n  state = {\n    description: \"\",\n    created: \"\",\n    last_resolved: \"\",\n    status: \"\",\n    project: \"\",\n    manager: \"\",\n    error: \"\",\n    filename: \"\",\n    file_id: \"\",\n    current_worker_id: \"\",\n    current_worker_info: \"\"\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleWorkerSelect = event => {\n    this.state.current_worker_id === event.target.name ?\n      this.setState({\n        current_worker_id: \"\"\n      })\n      :\n      this.setState({\n        current_worker_id: event.target.name\n      })\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    if (this.state.status === \"Rejected\" && !this.state.description) {\n      this.setState({\n        error: 'Rejections reason was not provided! Please, specify the rejection reason!'\n      })\n    } else {\n      this.formData = this.state;\n      delete this.formData.error;\n      delete this.formData.created;\n      delete this.formData.last_resolved;\n      delete this.formData.current_worker_id\n      delete this.formData.current_worker_info\n      await foxApi.patchEntityOf('approvals', this.props.match.params.id, this.formData)\n        .then(() => {\n          this.props.history.goBack()\n        })\n        .catch((error) => {\n          console.error(error);\n          this.setState({\n            error: 'Project update failed!' +\n              ' Please check your input and try again!' +\n              ' In case this problem repeats, please contact your administrator!'\n          })\n        })\n    }\n  }\n\n  downloadFile = async (e) => {\n    this.setState({\n      filename: e.target.value,\n      file_id: e.target.name\n    }, () => {\n      foxApi.downloadDocument(this.state.file_id)\n        .then((blob) => {\n          const url = window.URL.createObjectURL(new Blob([blob]));\n          const link = document.createElement('a');\n          link.href = url;\n          const filename = this.state.filename.split('/').pop();\n          link.setAttribute('download', filename);\n          document.body.appendChild(link);\n          link.click();\n          link.parentNode.removeChild(link);\n        })\n        .then(() => { console.log('file downloaded') })\n        .catch((error) => {\n          console.error('File download failed!');\n          console.error(error)\n        })\n    })\n  }\n\n  componentDidMount = async () => {\n    await this.props.getProfileFetch()\n      .then(() => foxApi.getDetailsOf('approvals', this.props.match.params.id))\n      .then((data) => this.setState(\n        { ...data }, () => {\n          this.props.getDocumentList({ project_id: this.state.project }, true);\n          this.props.getWorkerList({ project_id: this.state.project }, false)\n        }\n      ))\n  }\n\n  render = () => {\n    return (\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>\n              Attached Documents\n\t\t\t\t\t\t</CCardHeader>\n            <CCardBody>\n              {this.props.documents\n                ?\n                this.props.documents.map((document, idx) => {\n                  return (\n                    <React.Fragment key={idx}>\n                      <h6>\n                        {document.name}\n                      </h6>\n                      {document.url_to_doc ?\n                        <CLink\n                          key={`dl-${document.id}`}\n                          href={document.url_to_doc}\n                          target=\"_blank\"\n                          className=\"btn btn-ghost-primary\"\n                        >\n                          Open this document in Google Docs\n            \t\t\t\t\t\t</CLink>\n                        :\n                        <React.Fragment>\n                          <CButton\n                            variant=\"outline\"\n                            color=\"primary\"\n                            key={`cb-${document.id}`}\n                            id={document.id}\n                            name={document.id}\n                            value={document.filename}\n                            onClick={this.downloadFile}\n                          >\n                            Download document\n              \t\t\t\t\t\t</CButton>\n                          <DisplayFile document={document} />\n                        </React.Fragment>\n                      }\n                    </React.Fragment>\n                  )\n                })\n                :\n                null}\n            </CCardBody>\n          </CCard>\n          <CCard>\n            <CCardHeader>Workers</CCardHeader>\n            <CCardBody>\n              {this.props.workers ?\n                this.props.workers.map((worker, idx) => {\n                  return (\n                    <CCard key={`card-${idx}`} className=\"mb-0\">\n                      <CCardHeader key={`ch-${idx}`} id={worker.id}>\n                        <h5 key={`h5-${idx}`} className=\"m-0 p-0\">{worker.name}</h5>\n                        <h6 key={`h6-${idx}`} className=\"m-0 p-0\">{worker.position_in_company}</h6>\n                        <CButton\n                          key={`btn-${idx}`}\n                          block\n                          color=\"link\"\n                          className=\"text-left m-0 p-0\"\n                          id={worker.id}\n                          value={worker.id}\n                          name={worker.id}\n                          onClick={this.handleWorkerSelect}\n                        >Display Details</CButton>\n                      </CCardHeader>\n                      <CCollapse key={`clps-${idx}`} show={this.state.current_worker_id === worker.id.toString()}>\n                        <CCardBody key={`cbody-${idx}`}>\n                          <WorkerReview workerId={worker.id} />\n                        </CCardBody>\n                      </CCollapse>\n                    </CCard>\n                  )\n                })\n                :\n                null\n              }\n            </CCardBody>\n          </CCard>\n\n          <CCard>\n            <CCardBody>\n              <CForm onSubmit={this.handleSubmit}>\n                <DjangoCSRFToken />\n                <CFormGroup>\n                  <CLabel htmlFor=\"description\">Reject reason:</CLabel>\n                  <CTextarea\n                    id=\"description\"\n                    name=\"description\"\n                    value={this.state.description ? this.state.description : \"\"}\n                    onChange={this.handleChange}\n                  >\n                  </CTextarea>\n                </CFormGroup>\n                <CFormGroup>\n                  <CButton\n                    className=\"mr-3\"\n                    type=\"submit\"\n                    name=\"status\"\n                    value=\"Approved\"\n                    color=\"success\"\n                    variant=\"outline\"\n                    onClick={this.handleChange}\n                  >\n                    Approve\n\t\t\t\t\t\t\t\t\t\t</CButton>\n                  <CButton\n                    type=\"submit\"\n                    name=\"status\"\n                    value=\"Rejected\"\n                    color=\"danger\"\n                    variant=\"outline\"\n                    onClick={this.handleChange}\n                  >\n                    Reject\n\t\t\t\t\t\t\t\t\t</CButton>\n                </CFormGroup>\n                {this.state.error\n                  ? <p>{this.state.error}</p>\n                  : null\n                }\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    documents: state.additionalEntityListTable.tableData,\n    workers: state.entityListTable.tableData\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getProfileFetch: () => dispatch(getProfileFetch()),\n  getDocumentList: (params, additional) => dispatch(getDocumentList(params, additional)),\n  getWorkerList: (params, additional) => dispatch(getWorkerList(params, additional)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDetail)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAcA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AAGA;AACA;AACA;AACA;AAEA;AADA;AAKA;AADA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAJA;AAAA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAeA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AA2BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuqBA;AACA;;;;;AApOA;AACA;AAqOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}