{"version":3,"file":"16.main.js","sources":["webpack:///./src/components/views/projects/ProjectDetail.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { getProfileFetch, getContractorList, setProjectId } from '../../../actions'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel, CRow,\r\n  CCol,\r\n  CTextarea,\r\n  CSelect,\r\n  CLink,\r\n  CButton\r\n} from \"@coreui/react\";\r\nimport DjangoCSRFToken from 'django-react-csrftoken'\r\nimport { FoxApiService } from '../../../services'\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nclass ProjectDetail extends Component {\r\n\r\n  state = {\r\n    name: \"\",\r\n    description: \"\",\r\n    start_date: \"\",\r\n    start_time: \"\",\r\n    end_date: \"\",\r\n    end_time: \"\",\r\n    company: this.props.company,\r\n    contractor: \"-1\",\r\n    error: false\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    if (parseInt(this.state.contractor) < 0) {\r\n      this.setState({\r\n        error: 'Contractor was not selected! Please, choose contractor form the list'\r\n      })\r\n    } else {\r\n      this.formData = this.state;\r\n      delete this.formData.error;\r\n      await foxApi.updateEntityOf('projects', this.props.match.params.id, this.formData).then(() => {\r\n        this.props.history.goBack()\r\n      },\r\n        (error) => {\r\n          console.error(error);\r\n          this.setState({\r\n            error: 'Project update failed!' +\r\n              ' Please check your input and try again!' +\r\n              ' In case this problem repeats, please contact your administrator!'\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    console.log(this.props);\r\n    await this.props.getProfileFetch()\r\n      .then(() => foxApi.getDetailsOf('projects', this.props.match.params.id))\r\n      .then((data) => this.setState({ ...data }))\r\n      .then(() => this.props.getContractorList())\r\n      .then(() => this.props.setProjectId(this.props.match.params.id))\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <CRow>\r\n        <CCol>\r\n          <CForm\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            <DjangoCSRFToken />\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"name\">Name</CLabel>\r\n              <CInput\r\n                id=\"name\"\r\n                name='name'\r\n                placeholder=\"Enter project name\"\r\n                value={this.state.name}\r\n                onChange={this.handleChange}\r\n                required />\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"description\">Description</CLabel>\r\n              <CTextarea\r\n                id=\"descrption\"\r\n                name=\"description\"\r\n                placeholder=\"Please, enter short description of the projet\"\r\n                value={this.state.description}\r\n                onChange={this.handleChange}\r\n                required\r\n              />\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CRow>\r\n                <CCol lg=\"6\">\r\n                  <CLabel htmlFor=\"start_date\">Start Date</CLabel>\r\n                  <CInput\r\n                    type=\"date\"\r\n                    id=\"start_date\"\r\n                    name=\"start_date\"\r\n                    placeholder=\"date\"\r\n                    value={this.state.start_date}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                  />\r\n                </CCol>\r\n                <CCol lg=\"6\">\r\n                  <CLabel htmlFor=\"start_time\">Start Time</CLabel>\r\n                  <CInput\r\n                    type=\"time\"\r\n                    id=\"start_time\"\r\n                    name=\"start_time\"\r\n                    // placeholder=\"date\"\r\n                    value={this.state.start_time}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                  />\r\n                </CCol>\r\n              </CRow>\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CRow>\r\n                <CCol lg=\"6\">\r\n                  <CLabel htmlFor=\"end_date\">End Date</CLabel>\r\n                  <CInput\r\n                    type=\"date\"\r\n                    id=\"end_date\"\r\n                    name=\"end_date\"\r\n                    placeholder=\"date\"\r\n                    value={this.state.end_date}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                  />\r\n                </CCol>\r\n                <CCol lg=\"6\">\r\n                  <CLabel htmlFor=\"end_time\">End Time</CLabel>\r\n                  <CInput\r\n                    type=\"time\"\r\n                    id=\"end_time\"\r\n                    name=\"end_time\"\r\n                    // placeholder=\"date\"\r\n                    value={this.state.end_time}\r\n                    onChange={this.handleChange}\r\n                    required\r\n                  />\r\n                </CCol>\r\n              </CRow>\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"contractor\">Contractor</CLabel>\r\n              <CSelect\r\n                id=\"contractor\"\r\n                name=\"contractor\"\r\n                placeholder=\"Choose contractor\"\r\n                value={this.state.contractor}\r\n                onChange={this.handleChange}\r\n                required\r\n              >\r\n                <option key=\"-1\" value=\"-1\" disabled>Choose contractor</option>\r\n                {this.props.options.map((option) => {\r\n                  return (\r\n                    <option key={option.id} value={option.id}>{option.username}</option>\r\n                  )\r\n                })}\r\n              </CSelect>\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CLink\r\n                className=\"btn btn-outline-dark mr-3\"\r\n                to={`${this.props.match.url}/ptw`}\r\n              >\r\n                See Permission To Work\r\n              </CLink>\r\n              <CLink\r\n                className=\"btn btn-outline-dark\"\r\n                to={`${this.props.match.url}/documents`}\r\n              >\r\n                Attached Documents\r\n              </CLink>\r\n            </CFormGroup>\r\n\r\n            <CFormGroup>\r\n              <CButton type=\"submit\" color=\"success\" variant=\"outline\" block>Save changes</CButton>\r\n            </CFormGroup>\r\n            {this.state.error\r\n              ? <p>{this.state.error}</p>\r\n              : null\r\n            }\r\n          </CForm>\r\n        </CCol>\r\n      </CRow >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    company: state.currentUser.company,\r\n    options: state.entityListTable.tableData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getProfileFetch: () => dispatch(getProfileFetch()),\r\n  getContractorList: () => dispatch(getContractorList()),\r\n  setProjectId: (id) => dispatch(setProjectId(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDetail)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAWA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AACA;AALA;AAAA;AACA;AADA;AAQA;AACA;AATA;AAAA;AAWA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAIA;AADA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAPA;AAcA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAPA;AAaA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAKA;AACA;AAFA;AAOA;AACA;AAFA;AASA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAvLA;AACA;AAwLA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}