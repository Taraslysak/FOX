{"version":3,"file":"16.main.js","sources":["webpack:///./src/components/views/projects/ProjectCreate.js","webpack:///./src/components/views/projects/optionsLists.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { getProfileFetch, getContractorList } from '../../../actions'\nimport { connect } from 'react-redux'\nimport {\n  CForm,\n  CFormGroup,\n  CInput,\n  CLabel,\n  CRow,\n  CCol,\n  CTextarea,\n  CButton,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CCardTitle,\n  CCardSubtitle\n} from \"@coreui/react\";\nimport DjangoCSRFToken from 'django-react-csrftoken'\nimport { FoxApiService } from '../../../services'\nimport { FoxSwitchGroup } from '../../../utils'\nimport { FoxReactSelectFormGroup } from '../../forms'\nimport { permitOptions } from './optionsLists'\n\nconst foxApi = new FoxApiService();\n\nclass ProjectCreate extends Component {\n\n  state = {\n    name: \"\",\n    location: \"\",\n    description: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    company: this.props.company,\n    contractor: \"-1\",\n    work_at_height: false,\n    lifting_work: false,\n    confined_space: false,\n    hot_work: false,\n    chemical_handling: false,\n    work_alone: false,\n    work_at_sensitive_area: false,\n    cold_work: false,\n    error: false\n  }\n\n  handleChange = event => {\n\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleCheck = event => {\n    console.log(event);\n    this.setState({\n      [event.target.name]: event.target.checked\n    })\n  }\n\n  handleReactSelect = (option, event) => {\n    this.setState({\n      [event.name]: option.value\n    })\n  }\n\n  silenceSubmit = event => {\n    event.preventDefault();\n  }\n\n  handleCreateProject = async () => {\n    await this.handleSubmit()\n      .then(() => {\n        this.props.history.goBack()\n      })\n      .catch((error) => {\n        console.error(error);\n        this.setState({\n          error: 'Project creation failed!' +\n            ' Please check your input and try again!' +\n            ' In case this problem repeats, please contact your administrator!'\n        })\n      })\n  }\n\n  handleDocumentCreationRedirect = async () => {\n    await this.handleSubmit()\n      .then(data => {\n        this.props.history.push(`/projects/${data.id}/documents/new`)\n      })\n      .catch((error) => {\n        console.error(error);\n        this.setState({\n          error: 'Project creation failed!' +\n            ' Please check your input and try again!' +\n            ' In case this problem repeats, please contact your administrator!'\n        })\n      })\n  }\n\n  handleSubmit = async () => {\n    if (parseInt(this.state.contractor) < 0) {\n      this.setState({\n        error: 'Contractor was not selected! Please, choose contractor form the list'\n      })\n    } else {\n      this.formData = this.state;\n      delete this.formData.error;\n      return await foxApi.createEntityOf('projects', this.formData)\n    }\n  }\n\n  componentDidMount = async () => {\n    await this.props.getProfileFetch()\n      .then(() => this.props.getContractorList())\n  }\n\n  render = () => {\n    const options = this.props.options ? this.props.options.map(option => { return { value: option.id, label: option.username } }) : null\n    return (\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>\n              <CCardTitle>\n                Add New Project\n              </CCardTitle>\n              <CCardSubtitle>Fill up the form below to add a new Project</CCardSubtitle>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                onSubmit={this.silenceSubmit}\n              >\n                <DjangoCSRFToken />\n                <CFormGroup>\n                  <CInput\n                    id=\"name\"\n                    name='name'\n                    placeholder=\"Project Name\"\n                    value={this.state.name}\n                    onChange={this.handleChange}\n                    required />\n                </CFormGroup>\n                <CFormGroup>\n                  <CInput\n                    id=\"location \"\n                    name=\"location\"\n                    placeholder=\"Project Works Location\"\n                    value={this.state.location}\n                    onChange={this.handleChange}\n                    required />\n                </CFormGroup>\n                <CFormGroup>\n                  <CTextarea\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Short Project Description\"\n                    value={this.state.description}\n                    onChange={this.handleChange}\n                    required\n                  />\n                </CFormGroup>\n                <CFormGroup>\n                  <CRow>\n                    <CCol lg=\"6\">\n                      <CLabel htmlFor=\"start_date\">Start Date</CLabel>\n                      <CInput\n                        type=\"datetime-local\"\n                        id=\"start_date\"\n                        placeholder='Start date'\n                        name=\"start_date\"\n                        value={this.state.start_date}\n                        onChange={this.handleChange}\n                        required\n                      />\n                    </CCol>\n                    <CCol lg=\"6\">\n                      <CLabel htmlFor=\"end_date\">End Date</CLabel>\n                      <CInput\n                        type=\"datetime-local\"\n                        id=\"end_date\"\n                        name=\"end_date\"\n                        placeholder=\"date\"\n                        value={this.state.end_date}\n                        onChange={this.handleChange}\n                        required\n                      />\n\n                    </CCol>\n                  </CRow>\n                </CFormGroup>\n                <FoxReactSelectFormGroup\n                  options={options}\n                  inputInfo=\"contractor\"\n                  inputValue={this.state.contractor}\n                  handleChange={this.handleReactSelect}\n                />\n                <FoxSwitchGroup\n                  groupLabel='Choose the related hazardous work\n                  from the list below:'\n                  options={permitOptions}\n                  handleCheck={this.handleCheck}\n                  parentState={this.state}\n                />\n                <CButton shape=\"pill\" onClick={this.handleDocumentCreationRedirect} color=\"dark\" variant=\"outline\" block>Create Project and go to document creation</CButton>\n                {/* <CButton onClick={this.handleCreateProject} color=\"dark\" variant=\"outline\" block>Create Project</CButton> */}\n                {this.state.error\n                  ? <p>{this.state.error}</p>\n                  : null\n                }\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    company: state.currentUser.company,\n    options: state.entityListTable.tableData\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getProfileFetch: () => dispatch(getProfileFetch()),\n  getContractorList: () => dispatch(getContractorList())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectCreate)\n","const permitOptions = [\n    \"work_at_height\",\n    \"lifting_work\",\n    \"confined_space\",\n    \"hot_work\",\n    \"chemical_handling\",\n    \"work_alone\",\n    \"work_at_sensitive_area\",\n    \"cold_work\",\n]\n\nexport { permitOptions }"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAHA;AAAA;AACA;AADA;AAMA;AACA;AAPA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAcA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;;;;;AAhMA;AACA;AAiMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AACA;AAIA;;;;;;;;;;;;ACxOA;AAAA;AAAA;;;;;A","sourceRoot":""}