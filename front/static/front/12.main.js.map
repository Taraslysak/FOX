{"version":3,"file":"12.main.js","sources":["webpack:///./src/components/views/contractors/ContractorDetail.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { getProfileFetch } from '../../../actions'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel, CRow,\r\n  CCol,\r\n  CTextarea,\r\n  CSelect,\r\n} from \"@coreui/react\";\r\nimport DjangoCSRFToken from 'django-react-csrftoken'\r\nimport { FoxApiService } from '../../../services'\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nclass ContractorDetail extends Component {\r\n\r\n  state = {\r\n    username: \"\",\r\n    email: \"\",\r\n    company: this.props.company,\r\n    role: \"Contr\",\r\n    error: false\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n    console.log(this.props);\r\n  }\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    this.formData = this.state;\r\n    delete this.formData.error;\r\n    console.log(this.formData);\r\n    await foxApi.createEntityOf('contractors', this.formData).then(() => {\r\n      this.props.history.goBack()\r\n    },\r\n      (error) => {\r\n        console.error(error);\r\n        this.setState({\r\n          error: 'Contractor creation failed!' +\r\n            ' Please check your input and try again!' +\r\n            ' In case this problem repeats, please contact your administrator!'\r\n        })\r\n      })\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.props.getProfileFetch()\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <CRow>\r\n        <CCol>\r\n          <CForm\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            <DjangoCSRFToken />\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"username\">Enter contractor username</CLabel>\r\n              <CInput\r\n                id=\"username\"\r\n                name='username'\r\n                placeholder=\"Username\"\r\n                value={this.state.username}\r\n                onChange={this.handleChange}\r\n                required />\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CLabel htmlFor=\"email\">Enter contractor email</CLabel>\r\n              <CInput\r\n                id=\"email\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Email\"\r\n                value={this.state.email}\r\n                onChange={this.handleChange}\r\n                required\r\n              />\r\n            </CFormGroup>\r\n            <CFormGroup>\r\n              <CInput type=\"submit\" value=\"Create contractor\" color=\"info\" disabled={this.state.password !== this.state.password2} />\r\n            </CFormGroup>\r\n            {this.props.registerErrorFlag\r\n              ? <p>{this.props.errorMessage ? this.props.errorMessage : 'INVALID CREDENTIALS! PLEASE, CHECK YOUR PASSWORD AND PASSWORD CONFIRMATION FIELDS!'}</p>\r\n              : null\r\n            }\r\n            {this.state.error\r\n              ? <p>{this.state.error}</p>\r\n              : null\r\n            }\r\n          </CForm>\r\n        </CCol>\r\n      </CRow >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    company: state.currentUser.company,\r\n    options: state.entityListTable.tableData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getProfileFetch: () => dispatch(getProfileFetch())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContractorDetail)\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAMA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AAIA;AADA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;;;;;AArFA;AACA;AAsFA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}