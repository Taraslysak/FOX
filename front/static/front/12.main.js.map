{"version":3,"file":"12.main.js","sources":["webpack:///./src/components/views/approvals/ApprovalDetail.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport DjangoCSRFToken from 'django-react-csrftoken'\r\nimport { getProfileFetch, getDocumentList, getWorkerList } from '../../../actions'\r\nimport {\r\n  CForm,\r\n  CFormGroup,\r\n  CLabel,\r\n  CRow,\r\n  CCol,\r\n  CTextarea,\r\n  CLink,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCollapse\r\n} from \"@coreui/react\";\r\nimport { FoxApiService } from '../../../services'\r\nimport { DisplayFile, WorkerReview } from '../../../utils'\r\n\r\nconst foxApi = new FoxApiService();\r\n\r\nclass ProjectDetail extends Component {\r\n\r\n  state = {\r\n    description: \"\",\r\n    created: \"\",\r\n    last_resolved: \"\",\r\n    status: \"\",\r\n    project: \"\",\r\n    manager: \"\",\r\n    error: \"\",\r\n    filename: \"\",\r\n    file_id: \"\",\r\n    current_worker_id: \"\",\r\n    current_worker_info: \"\"\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleWorkerSelect = event => {\r\n    this.state.current_worker_id === event.target.name ?\r\n      this.setState({\r\n        current_worker_id: \"\"\r\n      })\r\n      :\r\n      this.setState({\r\n        current_worker_id: event.target.name\r\n      })\r\n  }\r\n\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    if (this.state.status === \"Rejected\" && !this.state.description) {\r\n      this.setState({\r\n        error: 'Rejections reason was not provided! Please, specify the rejection reason!'\r\n      })\r\n    } else {\r\n      this.formData = this.state;\r\n      delete this.formData.error;\r\n      delete this.formData.created;\r\n      delete this.formData.last_resolved;\r\n      delete this.formData.current_worker_id\r\n      delete this.formData.current_worker_info\r\n      await foxApi.patchEntityOf('approvals', this.props.match.params.id, this.formData)\r\n        .then(() => {\r\n          this.props.history.goBack()\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n          this.setState({\r\n            error: 'Project update failed!' +\r\n              ' Please check your input and try again!' +\r\n              ' In case this problem repeats, please contact your administrator!'\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  downloadFile = async (e) => {\r\n    this.setState({\r\n      filename: e.target.value,\r\n      file_id: e.target.name\r\n    }, () => {\r\n      foxApi.downloadDocument(this.state.file_id)\r\n        .then((blob) => {\r\n          const url = window.URL.createObjectURL(new Blob([blob]));\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          const filename = this.state.filename.split('/').pop();\r\n          link.setAttribute('download', filename);\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          link.parentNode.removeChild(link);\r\n        })\r\n        .then(() => { console.log('file downloaded') })\r\n        .catch((error) => {\r\n          console.error('File download failed!');\r\n          console.error(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.getProfileFetch()\r\n      .then(() => foxApi.getDetailsOf('approvals', this.props.match.params.id))\r\n      .then((data) => this.setState(\r\n        { ...data }, () => {\r\n          this.props.getDocumentList({ project_id: this.state.project }, true);\r\n          this.props.getWorkerList({ project_id: this.state.project }, false)\r\n        }\r\n      ))\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <CRow>\r\n        <CCol>\r\n          <CCard>\r\n            <CCardHeader>\r\n              Attached Documents\r\n\t\t\t\t\t\t</CCardHeader>\r\n            <CCardBody>\r\n              {this.props.documents\r\n                ?\r\n                this.props.documents.map((document, idx) => {\r\n                  return (\r\n                    <React.Fragment key={idx}>\r\n                      <h6>\r\n                        {document.name}\r\n                      </h6>\r\n                      {document.url_to_doc ?\r\n                        <CLink\r\n                          key={`dl-${document.id}`}\r\n                          href={document.url_to_doc}\r\n                          target=\"_blank\"\r\n                          className=\"btn btn-ghost-primary\"\r\n                        >\r\n                          Open this document in Google Docs\r\n            \t\t\t\t\t\t</CLink>\r\n                        :\r\n                        <React.Fragment>\r\n                          <CButton\r\n                            variant=\"outline\"\r\n                            color=\"primary\"\r\n                            key={`cb-${document.id}`}\r\n                            id={document.id}\r\n                            name={document.id}\r\n                            value={document.filename}\r\n                            onClick={this.downloadFile}\r\n                          >\r\n                            Download document\r\n              \t\t\t\t\t\t</CButton>\r\n                          <DisplayFile document={document} />\r\n                        </React.Fragment>\r\n                      }\r\n                    </React.Fragment>\r\n                  )\r\n                })\r\n                :\r\n                null}\r\n            </CCardBody>\r\n          </CCard>\r\n          <CCard>\r\n            <CCardHeader>Workers</CCardHeader>\r\n            <CCardBody>\r\n              {this.props.workers ?\r\n                this.props.workers.map((worker, idx) => {\r\n                  return (\r\n                    <CCard key={`card-${idx}`} className=\"mb-0\">\r\n                      <CCardHeader key={`ch-${idx}`} id={worker.id}>\r\n                        <h5 key={`h5-${idx}`} className=\"m-0 p-0\">{worker.name}</h5>\r\n                        <h6 key={`h6-${idx}`} className=\"m-0 p-0\">{worker.position_in_company}</h6>\r\n                        <CButton\r\n                          key={`btn-${idx}`}\r\n                          block\r\n                          color=\"link\"\r\n                          className=\"text-left m-0 p-0\"\r\n                          id={worker.id}\r\n                          value={worker.id}\r\n                          name={worker.id}\r\n                          onClick={this.handleWorkerSelect}\r\n                        >Display Details</CButton>\r\n                      </CCardHeader>\r\n                      <CCollapse key={`clps-${idx}`} show={this.state.current_worker_id === worker.id.toString()}>\r\n                        <CCardBody key={`cbody-${idx}`}>\r\n                          <WorkerReview workerId={worker.id} />\r\n                        </CCardBody>\r\n                      </CCollapse>\r\n                    </CCard>\r\n                  )\r\n                })\r\n                :\r\n                null\r\n              }\r\n            </CCardBody>\r\n          </CCard>\r\n\r\n          <CCard>\r\n            <CCardBody>\r\n              <CForm onSubmit={this.handleSubmit}>\r\n                <DjangoCSRFToken />\r\n                <CFormGroup>\r\n                  <CLabel htmlFor=\"description\">Reject reason:</CLabel>\r\n                  <CTextarea\r\n                    id=\"description\"\r\n                    name=\"description\"\r\n                    value={this.state.description ? this.state.description : \"\"}\r\n                    onChange={this.handleChange}\r\n                  >\r\n                  </CTextarea>\r\n                </CFormGroup>\r\n                <CFormGroup>\r\n                  <CButton\r\n                    className=\"mr-3\"\r\n                    type=\"submit\"\r\n                    name=\"status\"\r\n                    value=\"Approved\"\r\n                    color=\"success\"\r\n                    variant=\"outline\"\r\n                    onClick={this.handleChange}\r\n                  >\r\n                    Approve\r\n\t\t\t\t\t\t\t\t\t\t</CButton>\r\n                  <CButton\r\n                    type=\"submit\"\r\n                    name=\"status\"\r\n                    value=\"Rejected\"\r\n                    color=\"danger\"\r\n                    variant=\"outline\"\r\n                    onClick={this.handleChange}\r\n                  >\r\n                    Reject\r\n\t\t\t\t\t\t\t\t\t</CButton>\r\n                </CFormGroup>\r\n                {this.state.error\r\n                  ? <p>{this.state.error}</p>\r\n                  : null\r\n                }\r\n              </CForm>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    documents: state.additionalEntityListTable.tableData,\r\n    workers: state.entityListTable.tableData\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getProfileFetch: () => dispatch(getProfileFetch()),\r\n  getDocumentList: (params, additional) => dispatch(getDocumentList(params, additional)),\r\n  getWorkerList: (params, additional) => dispatch(getWorkerList(params, additional)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDetail)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAcA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AAGA;AACA;AACA;AACA;AAEA;AADA;AAKA;AADA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAJA;AAAA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAeA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AA2BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAWA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AAKA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AASA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AAqBA;AACA;;;;;AApOA;AACA;AAqOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}