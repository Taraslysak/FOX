{"version":3,"file":"3.main.js","sources":["webpack:///./src/components/forms/FoxFormGroupDownloadUpload.js","webpack:///./src/components/forms/FoxFormGroupInputDownLoadUpload.js","webpack:///./src/components/forms/FoxFormGroupWithUpload.js","webpack:///./src/components/forms/FoxLoginForm.js","webpack:///./src/components/forms/FoxProjectDocumentDownloadUploadFormGroup.js","webpack:///./src/components/forms/FoxReactSelectFormGroup.js","webpack:///./src/components/forms/FoxRegisterForm.js","webpack:///./src/components/forms/FoxSelectFormGroup.js","webpack:///./src/components/forms/index.js","webpack:///./src/components/forms/inputs/FoxPasswordInput.js","webpack:///./src/components/forms/inputs/index.js"],"sourcesContent":["import React from 'react'\n\nimport {\n  CFormGroup,\n  CRow,\n  CCol,\n  CLabel,\n  CInputFile,\n  CButton\n} from '@coreui/react'\n\nconst makeLabel = inputString => {\n  return inputString.split(\"_\").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\nconst FoxFormGroupDownloadUpload = props => {\n  return (\n    <CFormGroup>\n      <CRow >\n        <CCol md=\"1\">\n          <CLabel htmlFor={props.inputInfo}>{makeLabel(props.inputInfo)}</CLabel>\n        </CCol>\n        <CCol md=\"2\">\n          <CButton\n            variant=\"outline\"\n            color=\"info\"\n            id={props.downloadValue}\n            name={props.uploadInfo}\n            value={props.downloadValue}\n            onClick={props.downloadFile}\n          >\n            {props.buttonText ? props.buttonText : 'Download scan'}\n          </CButton>\n        </CCol>\n        <CCol md=\"5\">\n          <CLabel htmlFor={props.uploadInfo}>{`New ${makeLabel(props.uploadInfo)}`}</CLabel>\n          <CInputFile id={props.uploadInfo} name={props.uploadInfo} onChange={props.handleFileUpload}\n          />\n        </CCol>\n      </CRow>\n    </CFormGroup>\n  )\n}\n\nexport default FoxFormGroupDownloadUpload","import React from 'react'\n\nimport {\n  CFormGroup,\n  CRow,\n  CCol,\n  CLabel,\n  CInput,\n  CInputFile,\n  CButton\n} from '@coreui/react'\n\nconst makeLabel = inputString => {\n  return inputString.split(\"_\").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\nconst makePlaceholder = inputString => {\n  return `Enter ${makeLabel(inputString)} info`\n}\n\nconst FoxFormGroupInputDownloadUpload = props => {\n  return (\n    <CFormGroup>\n      <CRow >\n        <CCol md=\"5\">\n          <CLabel htmlFor={props.inputInfo}>{makeLabel(props.inputInfo)}</CLabel>\n          <CInput\n            id={props.inputInfo}\n            name={props.inputInfo}\n            placeholder={makePlaceholder(props.inputInfo)}\n            value={props.inputValue}\n            onChange={props.handleChange}\n          />\n        </CCol>\n        <CCol md=\"2\" className=\"d-flex align-items-center\">\n          <CButton\n            variant=\"outline\"\n            color=\"info\"\n            id={props.downloadValue}\n            name={props.uploadInfo}\n            value={props.downloadValue}\n            onClick={props.downloadFile}\n          >\n            Download scan\n      \t\t\t\t</CButton>\n        </CCol>\n        <CCol md=\"5\">\n          <CLabel htmlFor={props.uploadInfo}>{`New ${makeLabel(props.uploadInfo)}`}</CLabel>\n          <CInputFile id={props.uploadInfo} name={props.uploadInfo} onChange={props.handleFileUpload}\n          />\n        </CCol>\n      </CRow>\n    </CFormGroup>\n  )\n}\n\nexport default FoxFormGroupInputDownloadUpload","import React from 'react'\n\nimport {\n  CFormGroup,\n  CRow,\n  CCol,\n  CLabel,\n  CInput,\n  CInputFile\n} from '@coreui/react'\n\nconst makeLabel = inputString => {\n  return inputString.split(\"_\").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\nconst makePlaceholder = inputString => {\n  return `Enter ${makeLabel(inputString)} info`\n}\n\nconst FoxFormGroupWithUpload = props => {\n  return (\n    <CFormGroup>\n      <CRow>\n        <CCol md=\"6\">\n          <CLabel htmlFor={props.inputInfo}>{makeLabel(props.inputInfo)}</CLabel>\n          <CInput\n            id={props.inputInfo}\n            name={props.inputInfo}\n            placeholder={makePlaceholder(props.inputInfo)}\n            value={props.inputValue}\n            onChange={props.handleChange}\n            required />\n        </CCol>\n        <CCol md=\"6\">\n          <CLabel htmlFor={props.uploadInfo}>{makeLabel(props.uploadInfo)}</CLabel>\n          <CInputFile id={props.uploadInfo} name={props.uploadInfo} onChange={props.handleFileUpload}\n            required />\n        </CCol>\n      </CRow>\n    </CFormGroup>\n  )\n}\n\nexport default FoxFormGroupWithUpload","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  CForm,\n  CFormGroup,\n  CInput,\n  CContainer,\n  CRow,\n  CCol,\n  CInputGroup,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CButton,\n  CImg\n} from \"@coreui/react\";\nimport CIcon from '@coreui/icons-react'\nimport DjangoCSRFToken from 'django-react-csrftoken'\nimport { userLoginFetch } from '../../actions'\nimport { FoxPasswordInput } from './inputs'\n\nclass FoxLoginForm extends Component {\n\n  state = {\n    username: \"\",\n    password: \"\"\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    this.props.userLoginFetch(this.state)\n  }\n\n  render() {\n    const { username, password } = this.state\n    return (\n      <CRow alignHorizontal=\"center\">\n        <CCol md=\"6\">\n          <CContainer fluid>\n            <CRow className=\"mb-2\">\n              <CCol md=\"8\" className=\"mx-auto\">\n                <CImg\n                  width=\"100%\"\n                  src='/static/front/images/signed-logo.png'\n                  className=\"mb-2\"\n                />\n              </CCol>\n            </CRow>\n            <CRow className=\"mt-2 mb-2\" alignHorizontal=\"center\">\n              <CCol className=\"mx-auto\">\n                <h1 className=\"fox-login-welcome\">Welcome to FOX!</h1>\n                <p className=\"fox-login-welcome\"> Please log in to your account.</p>\n              </CCol>\n            </CRow>\n            <CRow className=\"mt-2 mb-2\">\n              <CCol className=\"mx-auto\">\n                <CForm\n                  onSubmit={this.handleSubmit}\n                >\n                  <DjangoCSRFToken />\n                  <CFormGroup>\n                    <CInputGroup>\n                      <CInputGroupPrepend>\n                        <CInputGroupText invalid className={`fox-input-before${this.props.loginError ? \"-invalid\" : \"\"}`}>\n                          <CIcon name=\"cilUser\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <CInput\n                        id=\"username\"\n                        name='username'\n                        placeholder=\"Username\"\n                        value={username}\n                        onChange={this.handleChange}\n                        invalid={this.props.loginError}\n                        required />\n                      <CInputGroupAppend>\n                        <CInputGroupText className={`fox-input-after${this.props.loginError ? \"-invalid\" : \"\"}`}>\n                          <CIcon name=\"blank\" />\n                        </CInputGroupText>\n                      </CInputGroupAppend>\n                    </CInputGroup>\n                  </CFormGroup>\n                  <FoxPasswordInput\n                    inputName=\"password\"\n                    password={password}\n                    placeholder=\"Password\"\n                    submitError={this.props.loginError}\n                    handleChange={this.handleChange}\n                  />\n                  {this.props.loginError\n                    ? <p className={\"fox-form-invalid-feedback\"}>The username or password you have entered is invalid.\n                Please try again.</p>\n                    : null\n                  }\n                  <CFormGroup>\n                    <CButton shape=\"pill\" type=\"submit\" value=\"Submit\" color=\"dark\" block >Login</CButton>\n                  </CFormGroup>\n                </CForm>\n                <CButton type=\"link\" size=\"sm\" className=\"align-self-center\">Forgot password?</CButton>\n              </CCol>\n            </CRow>\n          </CContainer >\n        </CCol>\n      </CRow >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    loginError: state.loginError\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  userLoginFetch: userInfo => dispatch(userLoginFetch(userInfo))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FoxLoginForm)","import React from 'react'\n\nimport {\n  CCard,\n  CCardBody,\n  CFormGroup,\n  CRow,\n  CCol,\n  CLabel,\n  CInputFile,\n  CButton,\n  CLink\n} from '@coreui/react'\n\n\nconst FoxProjectDocumentDownLoadUploadFormGroup = props => {\n  return (\n    <CCard>\n      <CCardBody>\n        <CFormGroup key={`fg-${props.document.id}`}>\n\n          <CLabel key={`lb-${props.document.id}`} htmlFor={props.document.id}><h5>{props.document.name}</h5> </CLabel>\n          {props.document.url_to_doc ?\n            <CRow>\n              <CCol>\n                <CLink\n                  key={`dl-${props.document.id}`}\n                  href={props.document.url_to_doc}\n                  target=\"_blank\"\n                  className=\"btn btn-ghost-primary\"\n                >Open this document in Google Docs\n                </CLink>\n              </CCol>\n            </CRow>\n            :\n            <CRow>\n              <CCol md=\"3\">\n                <CButton\n                  variant=\"outline\"\n                  color=\"primary\"\n                  key={`cb-${props.document.id}`}\n                  id={props.document.id}\n                  name={props.document.id}\n                  value={props.document.filename}\n                  onClick={props.downloadFile}\n                >Download template for this document\n                </CButton>\n              </CCol>\n              <CCol md=\"5\">\n                <CLabel key={`lb-${props.document.id}`} htmlFor={props.document.id}><strong>Upload filled up document:</strong> </CLabel>\n                <CInputFile key={`of-${props.document.id}`}\n                  id={`file-${props.document.id}`}\n                  name={`${props.document.id}`}\n                  onChange={props.handleFileUpload}\n                />\n              </CCol>\n            </CRow>\n          }\n        </CFormGroup>\n      </CCardBody>\n    </CCard>\n\n  )\n\n}\n\nexport default FoxProjectDocumentDownLoadUploadFormGroup","import React from 'react'\nimport Select from 'react-select'\nimport {\n  CFormGroup,\n} from '@coreui/react'\n\nconst makeLabel = inputString => {\n  return inputString.split(\"_\").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\nconst makePlaceholder = inputString => {\n  return `Choose ${makeLabel(inputString)}`\n}\n\nconst getValueFromOptions = (value, options) => {\n  if (options) {\n    return options.find(option => option.value === value)\n  }\n}\n\n\nconst FoxReactSelectFormGroup = props => {\n  return (\n    <CFormGroup>\n      <Select\n        id={props.inputInfo}\n        name={props.inputInfo}\n        placeholder={makePlaceholder(props.inputInfo)}\n        value={getValueFromOptions(props.inputValue, props.options)}\n        onChange={props.handleChange}\n        options={props.options}\n        required\n      >\n      </Select>\n    </CFormGroup>\n  )\n}\n\nexport default FoxReactSelectFormGroup","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CForm, CFormGroup, CInput, CContainer, CRow, CCol, CImg, CButton } from \"@coreui/react\";\nimport CIcon from '@coreui/icons-react'\nimport DjangoCSRFToken from 'django-react-csrftoken'\nimport { userRegisterFetch, registerError, allowRegistration } from '../../actions'\nimport { FoxPasswordInput } from './inputs'\n\nclass FoxRegisterForm extends Component {\n\n  state = {\n    username: this.props.username,\n    password: \"\",\n    password2: \"\",\n  }\n\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    }, () => {\n      if (this.state.password !== this.state.password2) {\n        this.props.registerError();\n      }\n      else {\n        this.props.allowRegistration(this.props.registrationToken);\n      };\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.userRegisterFetch({\n      password: this.state.password,\n      token: this.props.registrationToken\n    })\n  }\n\n  render() {\n    console.log(this.props.registerError);\n    const { username, password, password2 } = this.state\n    return (\n      <CRow alignHorizontal=\"center\">\n        <CCol md=\"6\">\n          <CContainer fluid>\n            <CRow className=\"mb-2\">\n              <CCol md=\"8\" className=\"mx-auto\">\n                <CImg\n                  width=\"100%\"\n                  src='/static/front/images/signed-logo.png'\n                  className=\"mb-2\"\n                />\n              </CCol>\n            </CRow>\n            <CRow className=\"mt-2 mb-2\" alignHorizontal=\"center\">\n              <CCol className=\"mx-auto\">\n                <h1 className=\"fox-login-welcome\">Welcome to FOX!</h1>\n                <p className=\"fox-login-welcome\"> You are trying to register as <strong>{username}</strong>.  Please, fill this form to finish your registration.</p>\n              </CCol>\n            </CRow>\n            <CRow className=\"mt-2 mb-2\">\n              <CCol sm=\"8\" className=\"mx-auto\">\n                <CForm\n                  onSubmit={this.handleSubmit}\n                >\n                  <DjangoCSRFToken />\n                  <CFormGroup>\n                    <FoxPasswordInput\n                      inputName=\"password\"\n                      password={password}\n                      placeholder=\"Password\"\n                      submitError={this.props.registerErrorFlag}\n                      handleChange={this.handleChange}\n                    />\n                    <FoxPasswordInput\n                      inputName=\"password2\"\n                      password={password2}\n                      placeholder=\"Confirm password\"\n                      submitError={this.props.registerErrorFlag}\n                      handleChange={this.handleChange}\n                    />\n                    {this.props.registerErrorFlag\n                      ? <p className={\"fox-form-invalid-feedback\"}>The suggested password is inappropriate. Please, Try to choose more sophisticated password and try again.</p>\n                      : null\n                    }\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CButton shape=\"pill\" block type=\"submit\" color=\"dark\" disabled={this.state.password !== this.state.password2} >Register</CButton>\n                  </CFormGroup>\n                </CForm>\n              </CCol>\n            </CRow>\n          </CContainer >\n        </CCol>\n      </CRow >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    registerErrorFlag: state.registerError,\n    registrationToken: state.registrationToken,\n    errorMessage: state.errorMessage\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  userRegisterFetch: credentials => dispatch(userRegisterFetch(credentials)),\n  registerError: () => dispatch(registerError()),\n  allowRegistration: (token) => dispatch(allowRegistration(token))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FoxRegisterForm)","import React from 'react'\n\nimport {\n  CFormGroup,\n  CLabel,\n  CSelect\n} from '@coreui/react'\n\nconst makeLabel = inputString => {\n  return inputString.split(\"_\").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\nconst makePlaceholder = inputString => {\n  return `Choose ${makeLabel(inputString)} info`\n}\n\n\nconst FoxSelectFormGroup = props => {\n  return (\n    <CFormGroup>\n      <CSelect\n        id={props.inputInfo}\n        name={props.inputInfo}\n        placeholder={makePlaceholder(props.inputInfo)}\n        value={props.inputValue}\n        onChange={props.handleChange}\n        required\n      >\n        {props.options.map((option) => {\n          return (\n            <option key={option.id} value={option.id}>{option.position}</option>\n          )\n        }\n        )}\n      </CSelect>\n    </CFormGroup>\n  )\n}\n\nexport default FoxSelectFormGroup","import FoxFormGroupWithUpload from './FoxFormGroupWithUpload';\nimport FoxSelectFormGroup from './FoxSelectFormGroup';\nimport FoxReactSelectFormGroup from './FoxReactSelectFormGroup';\nimport FoxFormGroupInputDownloadUpload from './FoxFormGroupInputDownLoadUpload';\nimport FoxFormGroupDownloadUpload from './FoxFormGroupDownloadUpload';\nimport FoxProjectDocumentDownloadUploadFormGroup from './FoxProjectDocumentDownloadUploadFormGroup';\nimport FoxLoginForm from './FoxLoginForm';\nimport FoxRegisterForm from './FoxRegisterForm'\n\nexport {\n    FoxLoginForm,\n    FoxRegisterForm,\n    FoxFormGroupWithUpload,\n    FoxSelectFormGroup,\n    FoxReactSelectFormGroup,\n    FoxFormGroupInputDownloadUpload,\n    FoxFormGroupDownloadUpload,\n    FoxProjectDocumentDownloadUploadFormGroup,\n}","import React, { Component } from 'react';\nimport {\n  CFormGroup,\n  CInput,\n  CInputGroup,\n  CInputGroupAppend,\n  CInputGroupPrepend,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from '@coreui/icons-react'\n\n// inputName\n// password\n// placeholder\n// submitError\n// handleChange\n\nclass FoxPasswordInput extends Component {\n\n  state = {\n    showPassword: false\n  }\n\n  toggleShowPassword = () => {\n    this.setState({\n      showPassword: !this.state.showPassword\n    });\n  }\n\n  render() {\n    const { showPassword } = this.state;\n    return (\n      showPassword ?\n        <CFormGroup>\n          < CInputGroup >\n            <CInputGroupPrepend>\n              <CInputGroupText className={`fox-input-before${this.props.submitError ? \"-invalid\" : \"\"}`}>\n                <CIcon name=\"cilLockLocked\" />\n              </CInputGroupText>\n            </CInputGroupPrepend>\n            <CInput\n              id={this.props.inputName}\n              name={this.props.inputName}\n              placeholder={this.props.placeholder}\n              value={this.props.password}\n              onChange={this.props.handleChange}\n              invalid={this.props.submitError}\n              required\n            />\n            <CInputGroupAppend>\n              <CInputGroupText onClick={this.toggleShowPassword} className={`fox-input-after${this.props.submitError ? \"-invalid\" : \"\"}`}>\n                <CIcon name=\"cilLowVision\" />\n              </CInputGroupText>\n            </CInputGroupAppend>\n          </CInputGroup >\n        </CFormGroup >\n        :\n        <CFormGroup>\n          <CInputGroup>\n            <CInputGroupPrepend>\n              <CInputGroupText className={`fox-input-before${this.props.submitError ? \"-invalid\" : \"\"}`}>\n                <CIcon name=\"cilLockLocked\" />\n              </CInputGroupText>\n            </CInputGroupPrepend>\n            <CInput\n              type=\"password\"\n              id={this.props.inputName}\n              name={this.props.inputName}\n              placeholder={this.props.placeholder}\n              value={this.props.password}\n              onChange={this.props.handleChange}\n              invalid={this.props.submitError}\n              required\n            />\n            <CInputGroupAppend>\n              <CInputGroupText onClick={this.toggleShowPassword} className={`fox-input-after${this.props.submitError ? \"-invalid\" : \"\"}`}>\n                <CIcon name=\"cilMagnifyingGlass\" />\n              </CInputGroupText>\n            </CInputGroupAppend>\n          </CInputGroup>\n        </CFormGroup>\n    )\n  }\n\n}\n\nexport default FoxPasswordInput","import FoxPasswordInput from './FoxPasswordInput'\n\nexport { FoxPasswordInput }"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AASA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAOA;;;;AA1FA;AACA;AA4FA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;;;;;;;;;;;;AC7HA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAYA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAcA;AACA;AACA;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAHA;AACA;AAMA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;;;;;;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAEA;AADA;AAMA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AAxFA;AACA;AA0FA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AACA;AAKA;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AADA;AACA;AAGA;AACA;AACA;AADA;AAGA;AACA;;;;;;AACA;AAAA;AAEA;AAKA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AAAA;AACA;AAAA;AASA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AAAA;AACA;AAAA;AAMA;;;;AAjEA;AACA;AAoEA;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}