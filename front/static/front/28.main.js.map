{"version":3,"file":"28.main.js","sources":["webpack:///./src/components/views/managers/ClientManagerCreate.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { getProfileFetch } from '../../../actions'\nimport { connect } from 'react-redux'\nimport {\n  CForm,\n  CFormGroup,\n  CInput,\n  CLabel, CRow,\n  CCol,\n  CButton,\n  CSelect,\n  CCard,\n  CCardHeader,\n  CCardSubtitle,\n  CCardTitle,\n  CCardBody\n} from \"@coreui/react\";\nimport DjangoCSRFToken from 'django-react-csrftoken'\nimport { FoxApiService } from '../../../services'\n\nconst positions = [\n  { id: -1, position: \"Choose manager position\" },\n  { id: \"SafeMan\", position: \"Safety Manager\" },\n  { id: \"SecMan\", position: \"Security Manager\" },\n  { id: \"SecOff\", position: \"Security Officer\" },\n  { id: \"SiteOwn\", position: \"Site Owner\" },\n  { id: \"WorkOwn\", position: \"Owner of Work\" },\n  { id: \"SecGrd\", position: \"Security Guards\" }\n]\n\nconst foxApi = new FoxApiService();\n\nclass ClientManagerCreate extends Component {\n\n  state = {\n    username: \"\",\n    name: \"\",\n    email: \"\",\n    position: -1,\n    department: \"\",\n    company: this.props.company,\n    role: \"CliMan\",\n    error: false\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    if (parseInt(this.state.position) === -1) {\n      this.setState({\n        error: 'Client manager position was not selected! Please, choose position form the list'\n      })\n    } else {\n      this.formData = this.state;\n      delete this.formData.error;\n      await foxApi.createEntityOf('client_managers', this.formData).then(() => {\n        this.props.history.goBack()\n      },\n        (error) => {\n          console.error(error);\n          this.setState({\n            error: 'Client manager creation failed!' +\n              ' Please check your input and try again!' +\n              ' In case this problem repeats, please contact your administrator!'\n          })\n        })\n    }\n\n  }\n\n  componentDidMount = () => {\n    this.props.getProfileFetch()\n  }\n\n  render = () => {\n    return (\n\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>\n              <CCardTitle>\n                New Manager\n              </CCardTitle>\n              <CCardSubtitle>\n                Fill up the form below to add a new Manager\n              </CCardSubtitle>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                onSubmit={this.handleSubmit}\n              >\n                <DjangoCSRFToken />\n                <CFormGroup>\n                  <CInput\n                    id=\"username\"\n                    name='username'\n                    placeholder=\"Username. This will be used for login\"\n                    value={this.state.username}\n                    onChange={this.handleChange}\n                    required />\n                </CFormGroup>\n                <CFormGroup>\n                  <CInput\n                    id=\"name\"\n                    name='name'\n                    placeholder=\"Verbose name\"\n                    value={this.state.name}\n                    onChange={this.handleChange}\n                    required />\n                </CFormGroup>\n                <CFormGroup>\n                  <CInput\n                    id=\"email\"\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    value={this.state.email}\n                    onChange={this.handleChange}\n                    required\n                  />\n                </CFormGroup>\n                <CFormGroup>\n                  <CSelect\n                    id=\"position\"\n                    name=\"position\"\n                    placeholder=\"Choose position\"\n                    value={this.state.position}\n                    onChange={this.handleChange}\n                    required\n                  >\n                    {positions.map((option) => {\n                      return (\n                        <option key={option.id} value={option.id}>{option.position}</option>\n                      )\n                    }\n                    )}\n                  </CSelect>\n                </CFormGroup>\n                <CFormGroup>\n                  <CInput\n                    id=\"department\"\n                    name=\"department\"\n                    placeholder=\"Department\"\n                    value={this.state.department}\n                    onChange={this.handleChange}\n                    required />\n                </CFormGroup>\n                <CFormGroup>\n                  <CButton shape=\"pill\" type=\"submit\" color=\"dark\" variant=\"outline\" block>Create client manager</CButton>\n                </CFormGroup>\n                {this.state.error\n                  ? <p>{this.state.error}</p>\n                  : null\n                }\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    company: state.currentUser.company,\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getProfileFetch: () => dispatch(getProfileFetch())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClientManagerCreate)\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAcA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AAGA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAJA;AAAA;AACA;AADA;AAOA;AACA;AARA;AAAA;AAUA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AAeA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;;;;;AAvIA;AACA;AAwIA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}