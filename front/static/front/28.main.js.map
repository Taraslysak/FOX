{"version":3,"file":"28.main.js","sources":["webpack:///./src/components/views/workers/Assign.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { getProfileFetch, getWorkerList, getDocumentList, setProjectId } from '../../../actions'\nimport { connect } from 'react-redux'\nimport {\n  CForm,\n  CFormGroup,\n  CLabel,\n  CRow,\n  CCol,\n  CButton,\n  CInputCheckbox,\n  CSelect\n} from \"@coreui/react\";\nimport DjangoCSRFToken from 'django-react-csrftoken'\nimport { FoxApiService } from '../../../services'\n\nconst foxApi = new FoxApiService();\n\nclass WorkerAssign extends Component {\n\n  state = {\n    workers: [],\n    responsible_person: -1,\n    error: false,\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    }, () => console.log(this.state));\n  }\n\n  handleCheck = event => {\n    const { workers } = this.state\n    event.target.checked ?\n      workers.push(parseInt(event.target.value))\n      :\n      workers.splice(workers.indexOf(parseInt(event.target.value)), 1);\n    this.setState({\n      workers: workers\n    });\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    const { workers, responsible_person } = this.state;\n    let requestData = { workers: workers };\n    requestData = { responsible_person, ...requestData }\n    console.log(requestData);\n    await foxApi.patchEntityOf(\"projects\", this.props.match.params.id, requestData)\n      .then(() => {\n        this.props.history.goBack()\n      },\n        (error) => {\n          console.error(error);\n          this.setState({\n            error: 'Workers assignment failed!' +\n              ' Please check your input and try again!' +\n              ' In case this problem repeats, please contact your administrator!'\n          })\n        })\n  }\n\n  componentDidMount = async () => {\n    await this.props.getProfileFetch()\n      .then(() => this.props.getWorkerList())\n      .then(() => foxApi.getDetailsOf(\"projects\", this.props.match.params.id))\n      .then(data => this.setState({\n        workers: data.workers,\n        responsible_person: data.responsible_person\n      }))\n  }\n\n  render = () => {\n    return (\n      <CRow>\n        <CCol>\n          <CForm onSubmit={this.handleSubmit}>\n            <DjangoCSRFToken />\n            <CFormGroup>\n              <h4>Please, choose the responsible person among your workers.</h4>\n              <CSelect\n                id=\"responsible_person\"\n                name=\"responsible_person\"\n                placeholder=\"Choose responsible person\"\n                value={this.state.responsible_person}\n                onChange={this.handleChange}\n                required\n              >\n                <option key=\"-1\" value=\"-1\" disabled>Choose responsible person</option>\n                {this.props.workers ? this.props.workers.map((worker) => {\n                  return (\n                    <option key={worker.id} value={worker.id}>{worker.name}</option>\n                  )\n                }) : null\n                }\n              </CSelect>\n            </CFormGroup>\n            <CFormGroup>\n              <h4>Please, choose workers you want to assign for this project</h4>\n              {this.props.workers ?\n                this.props.workers.map((worker) => {\n                  let workers = this.state.workers;\n                  return (\n                    <CFormGroup key={`fg-${worker.id}`} variant=\"checkbox\" className=\"checkbox d-flex\">\n                      <CInputCheckbox\n                        key={`cb-${worker.id}`}\n                        id={worker.id}\n                        name={worker.id}\n                        value={worker.id}\n                        onChange={this.handleCheck}\n                        checked={workers.includes(worker.id)}\n                      />\n                      <CLabel key={`lb-${worker.id}`} variant=\"checkbox\" className=\"form-check-label mr-4\" htmlFor={worker.id}>{worker.name}</CLabel>\n                    </CFormGroup>\n                  )\n                }) : null}\n            </CFormGroup>\n            <CFormGroup>\n              <CButton type=\"submit\" color=\"dark\" variant=\"outline\" block>Save changes</CButton>\n            </CFormGroup>\n            {this.state.error\n              ? <p>{this.state.error}</p>\n              : null\n            }\n          </CForm>\n        </CCol >\n      </CRow >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    workers: state.entityListTable.tableData,\n    company: state.currentUser.company,\n    contractor: state.currentUser.id,\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getProfileFetch: () => dispatch(getProfileFetch()),\n  getWorkerList: () => dispatch(getWorkerList()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkerAssign)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AADA;AAGA;AACA;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AALA;AAAA;AAQA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AAGA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;AAhHA;AACA;AAiHA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AACA;AAIA;;;;A","sourceRoot":""}